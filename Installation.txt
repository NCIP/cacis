===================================================================================
JRE Installation (Optional)
===================================================================================

If you dont have JDK/JRE installed, please download
JRE/JDK version 1.6 for your OS from here,

http://www.oracle.com/technetwork/java/javase/downloads/

After you have installed the JRE/JDK, please download the Java Cryptography Extension
http://www.oracle.com/technetwork/java/javase/downloads/jce-6-download-429243.html

and follow the installation instructions in the jce/README.txt of the zip file



===================================================================================
Pre-requisites
===================================================================================

To compile and run the unit tests you will need the following

- Oracle Java Runtime Environment version 1.6 (see previous section)
- Apache Maven version 2.2.x (DOES NOT work with Maven 3.x)

It is recommended that the following Maven options be set

MAVEN_OPTS='-Xmx512m -XX:MaxPermSize=128m'

To install and use this software, the following software needs
to be installed first

- Virtuoso Database (http://virtuoso.openlinksw.com/)
  Please look at this ESD document
  (https://docs.google.com/a/semanticbits.com/document/d/
  1VFO4LuoWZWZuQWF3S21wBil67O3jLqL6twKcYQqpxHI/edit?hl=en_US&pli=1)

Note* On some Linux system you might have to install openssl-dev packages
to compile virtuoso

- PostgreSQL Database version version 8.x (recommended version 8.4)
  http://www.postgresql.org/

- Mirth Connect version 2.1
  (http://www.mirthcorp.com/community/mirth-connect)
  This ESD document can help with installing and configuring Mirth
  Connect (https://wiki.nci.nih.gov/display/caEHR/Mirth+Connect+Configuration+Guide)

Note* Configure Mirth Connect with a real database. By default it uses an in memory
database. See $MIRTH_CONNECT_HOME/conf/mirth.conf to configure the database for Mirth Connect

Note* It is recommended that you configure Mirth Connect with extra memory.

Edit the mcservice.vmoptions file and add the following parameters at the end

 -Xmx1024m
 -XX:MaxPermSize=128m


- OpenXDS version 1.0.1
 (https://www.projects.openhealthtools.org/sf/frs/do/listReleases/projects.openxds/frs.openxds_releases)
  Follow the installation guide here
  https://wiki.nci.nih.gov/display/caEHR/Mirth+Connect+Configuration+Guide


- JBOSS 5.x/Tomcat 6.x


-----------------------------------------------------------------------------------------------
    OpenXDS Configuration
-----------------------------------------------------------------------------------------------

After openxds-1.0.1 is deployed into JBOSS/Tomcat perform the following.

1:  Turn off patient id validation.

	openxds-web.war/WEB-INF/classes folder contains openxds.properties file
	look for validate.patient.id=true change it to validate.patient.id=false

2:	Restart Jboss/Tomcat.



===================================================================================
Build the Project
===================================================================================

There are several projects in the /pco directory.
To build the project, run the following in /pco:

 mvn clean install

This will run all of the maven sub-projects using the parent
pom.xml in /pco. To add a sub-project to the build, add the
project as a module in pco/pom.xml.

Note: This will also run all Unit and System tests and can take
some time to finish the build. To skip the tests from running, use

 "mvn clean install -DskipTests -Dskip.static.analysis=true -Dcobertura.skip=true"


===================================================================================
Build sub-projects  (Optional)
===================================================================================


h3. Build Instructions for each sub-module (Optional)
To configure and build individual sub-modules, refer to
the instructions of each sub-module.

Example: The configuration and build instructions for the Integration Platform are
in /pco/ip-mirth/ReadMe.txt

Note: sub-projects have their own Maven pom file to build and run tests/static
analysis on the individual projects. Some of the sub-modules do not produce any
deployable artifacts, and only provide dependencies for other sub-projects.


===================================================================================
Deployment
===================================================================================

To install the caCIS components, do the following

- Copy profiles.xml.example to profiles.xml
- Edit profiles.xml and fill in all the properties for your local environment
- Start Virtuoso Database server

##Configure the caCIS authorization database##
- Create an empty postgres database (configured as property named
  cacis.xds.authz.db.url in profiles.xml)
- Run xds-authz/src/main/resources/xds_store_permission.sql on the above database

- Stop Mirth Connect
Note*- Make sure the '$MC_HOME/mcservice restart' command works. The build
scripts will start/stop Mirth Connect several times during the deploy phase.

- Run "mvn deploy"
   or
   "mvn deploy -DskipTests -Dskip.static.analysis=true -Dcobertura.skip=true"

This will install all caCIS components in Mirth Connect. Once you start the
   Mirth Connect server, you will see caCIS channels in Mirth Connect


Restart the tomcat/JBoss service that is hosting the openXDS web application

If there is a firewall on the server. The following ports need to be open

- HTTP port 18081 (IP web service)
- HTTP port 18091 (SA web service)
- HTTP port 8080 (Mirth Connect)
- 5432 Postgresql DB server
- 1111 Virtuoso DB server
- HTTP Port 8890


The IP and SA services should be available at

http://localhost:18081/services/CanonicalModelProcessor?wsdl

http://localhost:18091/services/SemanticAdapter?wsdl


===================================================================================
Manually deploying Mirth Channels (Optional)
===================================================================================

If the automated deployment of Mirth Connect channel (see previous step) fails for
some reason. You can manually import channels into Mirth Connect.

Import all of the channels (in the order the channels are listed) from the following
scripts:

pco/transformer/target/classes/deploy.mc
pco/sa-mirth/target/classes/deploy.mc
pco/ip-mirth/target/classes/deploy.mc

You will need to run these deploy scripts as follows

$MIRTH_CONNECT_HOME/mccommand -s <full_path_to>/pco/transformer/target/classes/deploy.mc
$MIRTH_CONNECT_HOME/mccommand -s <full_path_to>/pco/sa-mirth/target/classes/deploy.mc
$MIRTH_CONNECT_HOME/mccommand -s <full_path_to>/pco/ip-mirth/target/classes/deploy.mc


If you do not run deployment you will also have to copy all jar files from:
1) ip-mirth/target/mc-custom-lib to MIRTH_CONNECT_LOCATION/custom-lib
2) ip-mirth/target/mc-cacis-lib to ./cacis-lib/

