<channel>
  <id>e1b26470-e7c1-428a-bd98-f7bbdf192c5b</id>
  <name>DR-4c_SecureFileTransfer</name>
  <description></description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1326738256800</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>7</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">sendToSFTP</property>
    </properties>
    <transformer>
      <steps/>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>sendToSFTP</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">return;
</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>sendToSFTP</name>
            <script>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;
var ftpsSender = globalChannelMap.get(&apos;ftpsSender&apos;);

try{
	var exchFormat = msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString();
	var address = msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;][&apos;recipient&apos;][&apos;ftpAddress&apos;][&apos;@url&apos;].toString();
	address = Packages.org.apache.commons.lang.StringUtils.replace(address, &apos;ftp://&apos;, &apos;&apos;);
	logger.info(&apos;Sending to FTP: &apos; + address);
	default xml namespace = &apos;urn:hl7-org:v3&apos;;
	var cdaDoc = msg[&apos;ClinicalDocument&apos;][0];

	if (exchFormat == &apos;CCD&apos;) {
		cdaDoc = &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;http://ncisvn.nci.nih.gov/svn/cacis/CACIS/trunk/technical_artifacts/xslt/CDA.xsl&quot;?&gt;\n&apos; + cdaDoc;
	}
	cdaDoc = Packages.com.mirth.connect.util.XmlUtil.prettyPrint(cdaDoc);

	var is = new Packages.java.io.ByteArrayInputStream(new Packages.java.lang.String(cdaDoc).getBytes());
	if (exchFormat == &apos;HL7_V2_CLINICAL_NOTE&apos;) {
		ftpsSender.sendDocument(is, address, &apos;.txt&apos;);
	} else {
		ftpsSender.sendDocument(is, address, &apos;.xml&apos;);
	}
	responseMap.put(&apos;sendToSFTP&apos;, &apos;Successfully sent to SFTP!&apos;);
}catch(err) {
	responseMap.put(&apos;sendToSFTP&apos;,  formatErrorStr(err.message));
}
return;</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;
var ftpsSender = globalChannelMap.get(&apos;ftpsSender&apos;);

try{
	var exchFormat = msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;][&apos;@exchangeFormat&apos;].toString();
	var address = msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;][&apos;recipient&apos;][&apos;ftpAddress&apos;][&apos;@url&apos;].toString();
	address = Packages.org.apache.commons.lang.StringUtils.replace(address, &apos;ftp://&apos;, &apos;&apos;);
	logger.info(&apos;Sending to FTP: &apos; + address);
	default xml namespace = &apos;urn:hl7-org:v3&apos;;
	var cdaDoc = msg[&apos;ClinicalDocument&apos;][0];

	if (exchFormat == &apos;CCD&apos;) {
		cdaDoc = &apos;&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;\n&lt;?xml-stylesheet type=&quot;text/xsl&quot; href=&quot;http://ncisvn.nci.nih.gov/svn/cacis/CACIS/trunk/technical_artifacts/xslt/CDA.xsl&quot;?&gt;\n&apos; + cdaDoc;
	}
	cdaDoc = Packages.com.mirth.connect.util.XmlUtil.prettyPrint(cdaDoc);

	var is = new Packages.java.io.ByteArrayInputStream(new Packages.java.lang.String(cdaDoc).getBytes());
	if (exchFormat == &apos;HL7_V2_CLINICAL_NOTE&apos;) {
		ftpsSender.sendDocument(is, address, &apos;.txt&apos;);
	} else {
		ftpsSender.sendDocument(is, address, &apos;.xml&apos;);
	}
	responseMap.put(&apos;sendToSFTP&apos;, &apos;Successfully sent to SFTP!&apos;);
}catch(err) {
	responseMap.put(&apos;sendToSFTP&apos;,  formatErrorStr(err.message));
}
return;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">false</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
var transformerContext = new Packages.org.springframework.context.support.ClassPathXmlApplicationContext(&quot;classpath*:applicationContext-ip-mirth.xml&quot;);
var names = transformerContext.getBeanDefinitionNames();

var ftpsSender = transformerContext.getBean(&quot;sender&quot;);

globalChannelMap.put(&apos;ftpsSender&apos;, ftpsSender);
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>