<channel>
  <id>701bba16-d3ce-4749-8eb1-c1e83e5373e8</id>
  <name>TransSplitChannel</name>
  <description>This is a TransSplitChannel. Takes input from ConfigChannel andsends the content to one of 3 channels depending on routing instructions.</description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1313431483007</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>6</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">Destination 1</property>
    </properties>
    <transformer>
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>Destination 1</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">return;</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>Process Routing Instructions</name>
            <script>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;

var exchDocs = msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;];

var responseMsg = &apos;&apos;;

for each (seg in exchDocs) {
	var exFrmt = seg[&apos;@exchangeFormat&apos;].toString();

	var rec = seg[&apos;recipient&apos;].child(0);
	var recTyp = rec.localName();
	var url = rec[&apos;@url&apos;].toString();
	var chNm = exFrmt + &apos;_Channel&apos;;
	var msgToRoute = msg.copy();
	msgToRoute[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;]=seg.copy();
	processRoute(chNm, msgToRoute, recTyp, url);
}

responseMap.put(&apos;Destination 1&apos;, responseMsg);

function processRoute(channelName, msgToRoute, recTyp, url) {
	var response = router.routeMessage(channelName, msgToRoute, false);
	handleResponse(response, recTyp, url );
}

function handleResponse(response, recTyp, url ) {
	responseMsg = responseMsg
			+ &apos;Processed routing for &apos;
			+ recTyp + &apos;, &apos; + url
			+ &apos;, with response :&apos; + response.getMessage() + &apos;!&apos;;
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;

var exchDocs = msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;];

var responseMsg = &apos;&apos;;

for each (seg in exchDocs) {
	var exFrmt = seg[&apos;@exchangeFormat&apos;].toString();

	var rec = seg[&apos;recipient&apos;].child(0);
	var recTyp = rec.localName();
	var url = rec[&apos;@url&apos;].toString();
	var chNm = exFrmt + &apos;_Channel&apos;;
	var msgToRoute = msg.copy();
	msgToRoute[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;]=seg.copy();
	processRoute(chNm, msgToRoute, recTyp, url);
}

responseMap.put(&apos;Destination 1&apos;, responseMsg);

function processRoute(channelName, msgToRoute, recTyp, url) {
	var response = router.routeMessage(channelName, msgToRoute, false);
	handleResponse(response, recTyp, url );
}

function handleResponse(response, recTyp, url ) {
	responseMsg = responseMsg
			+ &apos;Processed routing for &apos;
			+ recTyp + &apos;, &apos; + url
			+ &apos;, with response :&apos; + response.getMessage() + &apos;!&apos;;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PHA6Y2FDSVNSZXF1ZXN0IHVzZXJOYW1lPSIiIHhtbG5zOnA9Imh0dHA6Ly9jYWNpcy5uY2kubmlo
LmdvdiIgeG1sbnM6cDE9InVybjpobDctb3JnOnYzIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMu
b3JnLzIwMDEvWE1MU2NoZW1hLWluc3RhbmNlIiB4c2k6c2NoZW1hTG9jYXRpb249Imh0dHA6Ly9j
YWNpcy5uY2kubmloLmdvdiBjYUNJU0RhdGFTaGFyaW5nLnhzZCAiPgogICA8cDpyb3V0aW5nSW5z
dHJ1Y3Rpb25zPgogICA8cDpleGNoYW5nZURvY3VtZW50IGV4Y2hhbmdlRm9ybWF0PSJITDdfVjJf
Q0xJTklDQUxfTk9URSI+CiAgICAgPHA6cmVjaXBpZW50PgogICAgICAgPHA6c2VjdXJlRW1haWxB
ZGRyZXNzIHVybD0iaHR0cDovL3RlbXB1cmkub3JnIi8+CiAgICAgPC9wOnJlY2lwaWVudD4KICAg
PC9wOmV4Y2hhbmdlRG9jdW1lbnQ+CiA8L3A6cm91dGluZ0luc3RydWN0aW9ucz4KPC9wOmNhQ0lT
UmVxdWVzdD4=</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">false</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>