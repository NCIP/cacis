<channel>
  <id>a6414d87-9689-4e56-ab96-f4dad78a8a33</id>
  <name>navEmailAddressChannel</name>
  <description></description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1313679941289</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>109</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">navDestination</property>
    </properties>
    <transformer>
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>navDestination</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">return;</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>submitDocToXDS</name>
            <script>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;

var navEmail=msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;][&apos;recipient&apos;][&apos;navEmailAddress&apos;][&apos;@url&apos;].toString()

logger.error(&apos;navEmail = &apos; + navEmail);

var docH = globalChannelMap.get(&apos;documentHandler&apos;);
var navS = globalChannelMap.get(&apos;navSender&apos;);
var docAccMngr = globalChannelMap.get(&apos;docAccMngr&apos;);

var docSourceOID = globalChannelMap.get(&apos;docSourceOID&apos;);
var docOID = globalChannelMap.get(&apos;docOID&apos;);


//submit to XDS
var docId = &apos;&apos;;
try{
	docId = docH.handleDocument(getXDSDocumentMetadata());
	logger.error(&apos;docId = &apos; + docId);

	if(docId==&apos;undefined&apos; || docId == &apos;&apos;){
		responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error handling XDS document. No document id returned&apos;));
		return;
	}
}catch(herr) {
	responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error handling XDS document.&apos; + herr.message));
	return;
}

//Grant access to the document
//TODO: in ESD-3073 find out the correct subjectDN and use it for the user
try{
	var subjectDN = &apos;subjectdn&apos;;
	docAccMngr.grantDocumentAccess(docId, subjectDN);
}catch(accerr) {
	responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error giving access to the XDS document.&apos; + accerr.message));
	return;
}


var docIds = new Packages.java.util.ArrayList();
docIds.add(docId);
try{
	// Credentials of sender are set in the application context of NavConfig (always from the same address
	navS.setCredentials(&apos;cacisnavtestuser&apos;, &apos;c2c1sn2v&apos;);
	navS.send(navEmail, docIds);
}catch(naverr) {
	responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error sending NAV.&apos; + naverr.message));
	return;
}

responseMap.put(&apos;navDestination&apos;, ResponseFactory.getSuccessResponse(&apos;Sucessfully sent NAV&apos;));

function getXDSDocumentMetadata() {
	var docMd = new Packages.gov.nih.nci.cacis.xds.client.XDSDocumentMetadata();

	docMd.setDocEntryContent(getDocEntryContent());
	docMd.setSubmissionSetContent(getSubmissionSetContent());
	docMd.setDocumentType(Packages.org.openhealthtools.ihe.xds.document.DocumentDescriptor.XML);
	docMd.setDocOID(docOID);
	docMd.setDocSourceOID(docSourceOID);
	docMd.setDocumentContent(msg.toString());

	return docMd;
}

function getDocEntryContent() {
	//TODO : populate doc entry from the contents of msg
	//using hardcode default values for now
	var docEntryF = globalChannelMap.get(&apos;docEntryFile&apos;);
	var contents = FileUtil.read(docEntryF);

	return contents;
}

function getSubmissionSetContent() {
	//TODO : populate submission set from the contents of msg
	//using hardcode default values for now
	var ssF = globalChannelMap.get(&apos;submissionSetFile&apos;);
	var contents = FileUtil.read(ssF);

	return contents;
}</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>default xml namespace=&apos;http://cacis.nci.nih.gov&apos;;

var navEmail=msg[&apos;routingInstructions&apos;][&apos;exchangeDocument&apos;][&apos;recipient&apos;][&apos;navEmailAddress&apos;][&apos;@url&apos;].toString()

logger.error(&apos;navEmail = &apos; + navEmail);

var docH = globalChannelMap.get(&apos;documentHandler&apos;);
var navS = globalChannelMap.get(&apos;navSender&apos;);
var docAccMngr = globalChannelMap.get(&apos;docAccMngr&apos;);

var docSourceOID = globalChannelMap.get(&apos;docSourceOID&apos;);
var docOID = globalChannelMap.get(&apos;docOID&apos;);


//submit to XDS
var docId = &apos;&apos;;
try{
	docId = docH.handleDocument(getXDSDocumentMetadata());
	logger.error(&apos;docId = &apos; + docId);

	if(docId==&apos;undefined&apos; || docId == &apos;&apos;){
		responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error handling XDS document. No document id returned&apos;));
		return;
	}
}catch(herr) {
	responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error handling XDS document.&apos; + herr.message));
	return;
}

//Grant access to the document
//TODO: in ESD-3073 find out the correct subjectDN and use it for the user
try{
	var subjectDN = &apos;subjectdn&apos;;
	docAccMngr.grantDocumentAccess(docId, subjectDN);
}catch(accerr) {
	responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error giving access to the XDS document.&apos; + accerr.message));
	return;
}


var docIds = new Packages.java.util.ArrayList();
docIds.add(docId);
try{
	// Credentials of sender are set in the application context of NavConfig (always from the same address
	navS.setCredentials(&apos;cacisnavtestuser&apos;, &apos;c2c1sn2v&apos;);
	navS.send(navEmail, docIds);
}catch(naverr) {
	responseMap.put(&apos;navDestination&apos;, ResponseFactory.getFailureResponse(&apos;Error sending NAV.&apos; + naverr.message));
	return;
}

responseMap.put(&apos;navDestination&apos;, ResponseFactory.getSuccessResponse(&apos;Sucessfully sent NAV&apos;));

function getXDSDocumentMetadata() {
	var docMd = new Packages.gov.nih.nci.cacis.xds.client.XDSDocumentMetadata();

	docMd.setDocEntryContent(getDocEntryContent());
	docMd.setSubmissionSetContent(getSubmissionSetContent());
	docMd.setDocumentType(Packages.org.openhealthtools.ihe.xds.document.DocumentDescriptor.XML);
	docMd.setDocOID(docOID);
	docMd.setDocSourceOID(docSourceOID);
	docMd.setDocumentContent(msg.toString());

	return docMd;
}

function getDocEntryContent() {
	//TODO : populate doc entry from the contents of msg
	//using hardcode default values for now
	var docEntryF = globalChannelMap.get(&apos;docEntryFile&apos;);
	var contents = FileUtil.read(docEntryF);

	return contents;
}

function getSubmissionSetContent() {
	//TODO : populate submission set from the contents of msg
	//using hardcode default values for now
	var ssF = globalChannelMap.get(&apos;submissionSetFile&apos;);
	var contents = FileUtil.read(ssF);

	return contents;
}</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64">PGNhQ0lTUmVxdWVzdCB4bWxucz0iaHR0cDovL2NhY2lzLm5jaS5uaWguZ292IiB4bWxuczpjZGE9
InVybjpobDctb3JnOnYzIiB4bWxuczp4c2k9Imh0dHA6Ly93d3cudzMub3JnLzIwMDEvWE1MU2No
ZW1hLWluc3RhbmNlIiB1c2VyTmFtZT0idXNlcjEyMyI+Cgk8cm91dGluZ0luc3RydWN0aW9ucz4K
CQk8ZXhjaGFuZ2VEb2N1bWVudCBleGNoYW5nZUZvcm1hdD0iZXhjaGFuZ2UgZm9ybWF0Ij4KCQkJ
PHJlY2lwaWVudD4KCQkJCTxuYXZFbWFpbEFkZHJlc3MgdXJsPSJhQGIuYyIvPgoJCQk8L3JlY2lw
aWVudD4KCQk8L2V4Y2hhbmdlRG9jdW1lbnQ+Cgk8L3JvdXRpbmdJbnN0cnVjdGlvbnM+CjwvY2FD
SVNSZXF1ZXN0Pg==</inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">true</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data

var navContext = new Packages.org.springframework.context.support.ClassPathXmlApplicationContext(&apos;classpath*:applicationContext-nav.xml&apos;);
var documentHandler = navContext.getBean(&quot;documentHandler&quot;);
var navSender = navContext.getBean(&quot;notificationSender&quot;);

//TODO:ESD-3073 will change this from dummy to acutal access manager
var docAccMngr = navContext.getBean(&quot;dummyDocumentAccessManager&quot;);

globalChannelMap.put(&apos;navContext&apos;,navContext);
globalChannelMap.put(&apos;documentHandler&apos;,documentHandler);
globalChannelMap.put(&apos;navSender&apos;,navSender);
globalChannelMap.put(&apos;docAccMngr&apos;,docAccMngr);

var docSourceOID=&apos;${xds.doc.source.oid}&apos;;
globalChannelMap.put(&apos;docSourceOID&apos;,docSourceOID);

var docOID=&apos;${xds.doc.oid}&apos;;
globalChannelMap.put(&apos;docOID&apos;,docOID);

var docEntryFile =&apos;${xds.doc.entry.file}&apos;;
var submissionSetFile=&apos;${xds.doc.submissionset.file}&apos;;

globalChannelMap.put(&apos;docEntryFile&apos;,docEntryFile);
globalChannelMap.put(&apos;submissionSetFile&apos;,submissionSetFile);

return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>