<?xml version="1.0"?>

<project name="cacis-pcoplugin" default="all" basedir="."
         xmlns="antlib:org.apache.tools.ant">
    <property environment="env"/>
    <property name="app.name" value="pcoplugin"/>

    <property file="${basedir}/local.properties"/>
    <property file="${basedir}/default.properties"/>
    <property file="${software.dir}/build/project.properties"/>

    <property name="antfiles.dir" value="${basedir}/antfiles"/>

    <property name="root.dir" location="${basedir}/../.."/>
    <property name="software.dir.name" value="software"/>
    <property name="software.dir" location="${root.dir}/software"/>
    <property name="common.dir" value="${software.dir}/common"/>
    <property name="common.antfiles.dir" value="${common.dir}/antfiles"/>
    <property name="common.tolven.antfiles.dir" value="${common.antfiles.dir}/tolven"/>

    <property name="src.dir" value="${basedir}/src/main"/>
    <property name="src.java.dir" value="${src.dir}/java"/>
    <property name="src.manifest.dir" value="${basedir}/manifest"/>
    <property name="src.resources.dir" value="${src.dir}/resources"/>
    <property name="src.war.dir" value="${src.dir}/webapp"/>
    <property name="src.war.web-inf.dir" value="${src.war.dir}/WEB-INF"/>
    <property name="src.war.meta-inf.dir" value="${src.resources.dir}/META-INF"/>

    <property name="build.dir" value="${basedir}/target"/>
    <property name="build.classes.dir" value="${build.dir}/classes"/>
    <property name="build.jars.dir" value="${build.dir}/jars"/>
    <property name="build.wars.dir" value="${build.dir}/wars"/>
    <property name="target.dir" value="${build.dir}"/>
    <property name="war.name" value="${app.name}.war"/>

    <property name="src.gen.dir" value="${build.dir}/generated"/>

    <!--test-->
    <property name="test.src.dir" value="${basedir}/src/test"/>
    <property name="test.src.java.dir" value="${test.src.dir}/java"/>
    <property name="test.build.dir" value="${build.dir}"/>
    <property name="test.classes.dir" value="${test.build.dir}/test-classes"/>
    <property name="test.reports.dir" value="${test.build.dir}/reports"/>
    <property name="test.resources.dir" value="${test.src.dir}/resources"/>

    <!--ext dirs-->
    <property name="ext.dir" value="${basedir}/ext"/>
    <property name="ext.compile.dir" value="${ext.dir}/compile"/>
    <property name="ext.compile.jars.dir" value="${ext.compile.dir}"/>
    <property name="ext.runtime.dir" value="${ext.dir}/runtime"/>
    <property name="ext.runtime.jars.dir" value="${ext.runtime.dir}"/>
    <property name="ext.test.dir" value="${ext.dir}/test"/>
    <property name="ext.test.jars.dir" value="${ext.test.dir}"/>

    <property name="reports.dir" value="${software.dir}/target/reports/${app.name}"/>
    <property name="test.database" value=""/>
    <fileset id="caehr.cobertura.classes.pattern"
             dir="${build.classes.dir}">
    </fileset>

    <fileset id="caehr.system.cobertura.classes.pattern"
             dir="${build.classes.dir}">
    </fileset>

    <fileset id="caehr.tolven.system.cobertura.classes.pattern"
             dir="${build.classes.dir}">
    </fileset>


    <path id="compile.cp">
        <fileset dir="${ext.compile.jars.dir}">
            <include name="*.jar"/>
        </fileset>
    </path>

    <path id="run.cp">
        <fileset dir="${ext.runtime.jars.dir}">
            <include name="*.jar"/>
        </fileset>
        <pathelement location="${build.classes.dir}"/>
    </path>

    <path id="test.compile.cp">
        <fileset dir="${ext.test.jars.dir}">
            <include name="*.jar"/>
        </fileset>
        <path refid="compile.cp"/>
        <pathelement location="${build.classes.dir}"/>
    </path>

    <path id="test.dependencies.path">
        <pathelement location="${test.classes.dir}"/>
        <path refid="run.cp"/>
        <path refid="test.compile.cp"/>
    </path>

    <import file="${common.antfiles.dir}/build-common.xml"/>
    <!--tolven plug-in support-->
    <import file="${common.tolven.antfiles.dir}/buildTemplate.xml"/>
    <import file="${common.tolven.antfiles.dir}/buildImport.xml"/>
    <!--in container tests-->
    <import file="${common.tolven.antfiles.dir}/build-container-test.xml"/>

    <target name="clean" description="Clean the build artifacts">
        <if>
            <istrue value="${no.cxf}"/>
            <then>
                <!-- Coupled to the build-xjc trigger, don't delete codegen-ed files.  Massive speedup results -->
                <delete dir="${build.dir}" excludes="generated/**" includeemptydirs="true"/>
            </then>
            <else>
                <delete dir="${build.dir}"/>
            </else>
        </if>
        <delete dir="${reports.dir}"/>
    </target>

    <target name="create-properties" depends="create-tolven-properties"
            description="Create a properties file to be used at runtime">

        <propertyfile
                file="${build.classes.dir}/cacis-patient-registry.properties"
                comment="service properties">
            <entry key="cacis-patient-registry.schema.validation" value="${cacis-patient-registry.schema.validation}"/>

            <entry key="tolvenConfig.location" value="${tolvenConfig.location}"/>
            <entry key="tolven.user.id" value="${tolven.user.id}"/>
            <entry key="tolven.user.password" value="${tolven.user.password}"/>
            <entry key="tolven.user.accountId" value="${tolven.user.accountId}"/>

            <entry key="java.naming.factory.initial" value="${java.naming.factory.initial}"/>
            <entry key="java.naming.pcoplugin.url" value="${java.naming.pcoplugin.url}"/>
            <entry key="java.naming.factory.url.pkgs" value="${java.naming.factory.url.pkgs}"/>

            <entry key="isMockBackend" value="${isMockBackend}"/>

        </propertyfile>

        <copy todir="${build.classes.dir}" filtering="true" overwrite="true">
            <filterset>
                <filter token="cacis-patient-registry.schema.validation"
                        value="${cacis-patient-registry.schema.validation}"/>
            </filterset>
            <fileset dir="${src.resources.dir}">
            </fileset>
        </copy>

    </target>

    <target name="compile" description="Compile the source code">
        <mkdir dir="${build.classes.dir}"/>

        <javac srcdir="${src.java.dir}"
               debug="true"
               destdir="${build.classes.dir}" includeAntRuntime="false">
            <classpath refid="compile.cp"/>
        </javac>

    </target>

    <target name="compile-test" depends="compile" description="Compile the test sources">
        <mkdir dir="${test.classes.dir}"/>

        <javac srcdir="${test.src.java.dir}"
               debug="true"
               destdir="${test.classes.dir}">
            <classpath refid="test.compile.cp"/>
        </javac>
        <copy todir="${test.classes.dir}">
            <fileset dir="${test.resources.dir}">
                <include name="*.xml"/>
            </fileset>
        </copy>

    </target>

    <target name="jar" depends="compile,create-properties, jar:cacis-pco-api,
                                jar:cacis-pcoplugin-impl"
            description="--> make a jar file for this project">
    </target>

    <target name="jar:cacis-pco-api">
        <mkdir dir="${build.jars.dir}"/>
        <jar destfile="${build.jars.dir}/${ant.project.name}-api.jar">
            <fileset dir="${build.classes.dir}" erroronmissingdir="true">
                <include name="**/gov/nih/nci/caehr/services/**"/>
            </fileset>
        </jar>

    </target>

    <target name="jar:cacis-pcoplugin-impl">
        <mkdir dir="${build.jars.dir}"/>
        <jar destfile="${build.jars.dir}/${ant.project.name}-impl.jar">
            <fileset dir="${build.classes.dir}" erroronmissingdir="true">
                <exclude name="**/gov/nih/nci/caehr/**"/>
            </fileset>
        </jar>
    </target>


    <target name="deploy" description="Will deploy the Web services with the chosen SOAP toolkit">
        <copy file="${build.wars.dir}/${war.name}" todir="${cacis-patient-registry.war.deploy.dir}"
              overwrite="true"/>
    </target>


    <target name="build" />

    <target name="build-test" depends="jar,compile-test" description="Builds the test sources"/>

    <target name="test" depends="build-test,test:unit" description="Run JUnit tests"/>

    <target name="pre-commit" depends="clean,test, static-analysis"
            description="Target before committing changes to SVN"/>

    <target name="all" depends="clean,build,build-test"/>

    <target name="test-system" depends="build-test, test:system"
            description="Build and executes all unit and functional tests."/>

</project>