<?xml version="1.0" encoding="UTF-8"?>
<project name="pluginImport">


    <property name="src.manifest.dir" value="${basedir}/manifest"/>

    <!--
     Load up the plugin manifest which is the source of truth for the plugin.
     -->
    <xmlproperty file="${src.manifest.dir}/tolven-plugin.xml"/>

    <!--
     The name of the resulting zip file containing the packaged zip file
     -->
    <property name="zipFileName" value="${plugin(id)}-${plugin(version)}.zip"/>

    <target name="init">
        <mkdir dir="${build.dir}"/>
    </target>

    <target name="build-plugin">
        <fail>Your plugin is missing a build_plugin target</fail>
    </target>

    <target name="clean-deploy-to-local-repository" depends="clean"
            description="Clean, Build And Deploy To Local Repository">
        <antcall target="deploy-to-local-repository"/>
    </target>

    <!--
     Copy this plugin to the local repository and recalculate the metadata file in that repository.
     This is the same as genMetadata at the command line
     -->
    <target name="deploy-to-local-repository" depends="build-plugin" description="Update Local Repository">
        <echo message="${zipFileName}"/>
        <copy toDir="${respositoryLocal.location}/plugins"
              flatten="true" preservelastmodified="true">
            <fileset dir="${build.dir}">
                <include name="${zipFileName}"/>
            </fileset>
        </copy>
        <java fork="true" failonerror="true" classname="org.tolven.plugin.boot.TPFBoot"
              classpathref="compile.cp">
            <env key="TOLVEN_CONFIG_DIR" value="${tolvenConfig.location}"/>
            <arg line="-genMetadata -plugins ${respositoryLocal.location}/plugins -liburl file:///${respositoryLocal.location} -outdir ${respositoryLocal.location}"/>
        </java>
    </target>

    <!-- Compile sources (from src folder) if needed -->
    <target name="compileSection" depends="compileSectionCheck" if="compileSection${section}">
        <mkdir dir="${buildFolder}/${section}/classes"/>

    	<copy todir="${buildFolder}/${section}/classes" failonerror="false">
            <fileset dir="${section}/resources"/>
            <fileset dir="${buildFolder}/classes"/>
        </copy>
    </target>

	<!-- Copy jars from ext/runtime to lib folder of section -->
    <target name="libSection">
    	<!-- copies to section lib -->
    	<copy todir="${section}/lib"  >
            <fileset dir="ext/runtime">
            </fileset>
        </copy>
    	<!-- copies to build section lib -->
    	<copy todir="${buildFolder}/${section}/lib">
            <fileset dir="${section}/lib">
            </fileset>
        </copy>
    </target>

    <target name="zipSourceSection" if="zipSourceSection${section}">
        <echo message="Building  zip file for ${section}"/>

        <zip destfile="${buildFolder}/devLib.jar" update="true">
            <zipfileset dir="${section}/source"/>
        </zip>
    </target>

    <target name="compileSectionCheck">
        <!-- Include sources in devLib if requested -->
        <available property="compileSection${section}" file="${section}/source"/>
    </target>

    <!-- Build one section, also add source/classes to the devLib -->
    <target name="buildSection">
        <mkdir dir="${buildFolder}/${section}/classes"/>

        <!--copy maven build classes-->
        <copy toDir="${buildFolder}/${section}/classes">
            <fileset dir="${target.dir}/classes"/>
        </copy>

        <antcall target="compileSection">
            <param name="section" value="${section}"/>
        </antcall>
        <!-- Zip the section (except source) -->
        <zip destfile="${buildFolder}/${zipFileName}" whenempty="create" update="true">
            <zipfileset dir="${section}" erroronmissingdir="false" prefix="${section}">
                <exclude name="**/source/"/>
            </zipfileset>
            <zipfileset dir="${buildFolder}/${section}/classes" erroronmissingdir="false"
                        prefix="${section}/classes">
            </zipfileset>
        	<!--<zipfileset dir="${buildFolder}/${section}/lib" prefix="${section}/lib">-->
            <!--</zipfileset>-->
        </zip>
        <!-- Zip devLib content -->
        <zip destfile="${buildFolder}/devLib.jar" update="true">
            <zipfileset dir="${buildFolder}/${section}/classes"/>
        </zip>
        <!-- Include sources in devLib if requested -->
        <condition property="zipSourceSection${section}">
            <and>
                <available file="${section}/source"/>
                <equals arg1="true" arg2="${includeSourceInDevLib}" casesensitive="false"/>
            </and>
        </condition>
        <antcall target="zipSourceSection">
            <!--	<param name="section" value="${section}"/> -->
        </antcall>
    </target>


</project>
