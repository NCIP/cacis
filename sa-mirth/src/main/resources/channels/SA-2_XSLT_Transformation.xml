<channel>
  <id>ba0aa2df-d0e2-4dbd-b77d-46b8c2e67a5f</id>
  <name>SA-2_XSLT_Transformation</name>
  <description>This is the implementation of the XSLT TransformationComponent channel. Arch Name XSLT TransformationComponent</description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1321480559980</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>2</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">handleResponse</property>
    </properties>
    <transformer>
      <steps/>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>IdentifierResolver</name>
      <properties>
        <property name="DataType">Channel Writer</property>
        <property name="host">f9460cc7-cf5e-413f-be05-23ba953d9f26</property>
        <property name="synchronised">1</property>
        <property name="template">${message.encodedData}</property>
      </properties>
      <transformer>
        <steps>
          <step>
            <sequenceNumber>0</sequenceNumber>
            <name>transform</name>
            <script>var srcDataEle = msg[&apos;sourceData&apos;];
default xml namespace = &apos;urn:tolven-org:trim:4.0&apos;;

var trim = srcDataEle[&apos;trim&apos;];

try {

	var ccdWithoutNarrative = drTransformDocument(trim, &apos;trim2CCDTransformer&apos;);
	var ccdWithNarrative = drTransformDocument(ccdWithoutNarrative, &apos;generateNarrativeTransformer&apos;);

	//add the clinical document to the cacisrequest
	default xml namespace = &apos;http://cacis.nci.nih.gov&apos;;
	createSegment(&apos;ClinicalDocument&apos;, msg);
	msg[&apos;ClinicalDocument&apos;] = new XML(ccdWithNarrative);

} catch(err) {
	handleErrorStr(&apos;Trim to CCD transformation, &apos; + err.message);
} 
return;</script>
            <type>JavaScript</type>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>var srcDataEle = msg[&apos;sourceData&apos;];
default xml namespace = &apos;urn:tolven-org:trim:4.0&apos;;

var trim = srcDataEle[&apos;trim&apos;];

try {

	var ccdWithoutNarrative = drTransformDocument(trim, &apos;trim2CCDTransformer&apos;);
	var ccdWithNarrative = drTransformDocument(ccdWithoutNarrative, &apos;generateNarrativeTransformer&apos;);

	//add the clinical document to the cacisrequest
	default xml namespace = &apos;http://cacis.nci.nih.gov&apos;;
	createSegment(&apos;ClinicalDocument&apos;, msg);
	msg[&apos;ClinicalDocument&apos;] = new XML(ccdWithNarrative);

} catch(err) {
	handleErrorStr(&apos;Trim to CCD transformation, &apos; + err.message);
} 
return;</string>
              </entry>
            </data>
          </step>
        </steps>
        <inboundTemplate encoding="base64"></inboundTemplate>
        <outboundTemplate encoding="base64"></outboundTemplate>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules>
          <rule>
            <sequenceNumber>0</sequenceNumber>
            <name>filterOnError</name>
            <data class="map">
              <entry>
                <string>Script</string>
                <string>return filterOnError();</string>
              </entry>
            </data>
            <type>JavaScript</type>
            <script>return filterOnError();</script>
            <operator>NONE</operator>
          </rule>
        </rules>
      </filter>
      <transportName>Channel Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>handleResponse</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">var desArr = new Array(&apos;IdentifierResolver&apos;);
handleResponse(&apos;handleResponse&apos;, desArr);
return;</property>
      </properties>
      <transformer>
        <steps/>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">false</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
var transformerContext = new Packages.org.springframework.context.support.ClassPathXmlApplicationContext(&quot;classpath*:applicationContext-transformer.xml&quot;);

var trim2CCDTransformer = transformerContext.getBean(&quot;trim2CCDTransformer&quot;);
var generateNarrativeTransformer = transformerContext.getBean(&quot;generateNarrativeTransformer&quot;);

globalChannelMap.put(&apos;trim2CCDTransformer&apos;, trim2CCDTransformer);
globalChannelMap.put(&apos;generateNarrativeTransformer&apos;, generateNarrativeTransformer);

return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>