<channel>
  <id>0954b5b5-e525-4ca0-912d-11a06987f5da</id>
  <name>SA-4_InvokeIPCMPChannel</name>
  <description>Responsible for invoking the Canonical Model Processor service and sending the canonical data and the associated source data for processing to the caCIS Integration Platform.</description>
  <enabled>true</enabled>
  <version>2.1.1.5490</version>
  <lastModified>
    <time>1317228472677</time>
    <timezone>America/New_York</timezone>
  </lastModified>
  <revision>3</revision>
  <sourceConnector>
    <name>sourceConnector</name>
    <properties>
      <property name="DataType">Channel Reader</property>
      <property name="responseValue">handleResponse</property>
    </properties>
    <transformer>
      <steps/>
      <inboundTemplate encoding="base64"></inboundTemplate>
      <outboundTemplate encoding="base64"></outboundTemplate>
      <inboundProtocol>XML</inboundProtocol>
      <outboundProtocol>XML</outboundProtocol>
      <inboundProperties>
        <property name="stripNamespaces">false</property>
      </inboundProperties>
      <outboundProperties>
        <property name="stripNamespaces">false</property>
      </outboundProperties>
    </transformer>
    <filter>
      <rules/>
    </filter>
    <transportName>Channel Reader</transportName>
    <mode>SOURCE</mode>
    <enabled>true</enabled>
    <version>2.1.1.5490</version>
  </sourceConnector>
  <destinationConnectors>
    <connector>
      <name>IP-CMP-Destination</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">//Invoke the java client, which in turn, will invoke the IP Canonical Model Processor Service. &#xd;//The Mirth Connect channel for this component should monitor errors and Mirth Connect Alerts should be sent, 
//in case of errors, to the system administrator.

var cmpWsdlUrl = &apos;${cacis-ip.cmp.service.url}&apos;;

try{

	var ctx  = new Packages.org.springframework.context.support.ClassPathXmlApplicationContext(&quot;applicationContext-ip-mirth.xml&quot;);
	var client = ctx.getBean(&quot;canonicalModelProcessorClient&quot;);

	logger.info(&quot;Will send message to CMP service at &quot; + cmpWsdlUrl);
	var caCisRes = client.acceptCanonical(cmpWsdlUrl,messageObject.getEncodedData());
	responseMap.put(&apos;IP-CMP-Destination&apos;, ResponseFactory.getSuccessResponse(caCisRes.getStatus().toString()));
	logger.info(&quot;Response from CMP service with status &quot; + caCisRes.getStatus().toString());

}catch(cmpInvokeErr) {	
	logger.error(&quot;Error invoking CMP service &quot; + cmpInvokeErr.message);
	handleErrorStr(cmpInvokeErr.message);
}
return;


</property>
      </properties>
      <transformer>
        <steps/>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">false</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">false</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
    <connector>
      <name>handleResponse</name>
      <properties>
        <property name="DataType">JavaScript Writer</property>
        <property name="host">sink</property>
        <property name="script">var destArr = new Array(&quot;IP-CMP-Destination&quot;);

handleResponse(&apos;handleResponse&apos;, destArr);

return;</property>
      </properties>
      <transformer>
        <steps/>
        <inboundProtocol>XML</inboundProtocol>
        <outboundProtocol>XML</outboundProtocol>
        <inboundProperties>
          <property name="stripNamespaces">true</property>
        </inboundProperties>
        <outboundProperties>
          <property name="stripNamespaces">true</property>
        </outboundProperties>
      </transformer>
      <filter>
        <rules/>
      </filter>
      <transportName>JavaScript Writer</transportName>
      <mode>DESTINATION</mode>
      <enabled>true</enabled>
      <version>2.1.1.5490</version>
    </connector>
  </destinationConnectors>
  <properties>
    <property name="clearGlobalChannelMap">false</property>
    <property name="dont_store_filtered">false</property>
    <property name="encryptData">false</property>
    <property name="error_messages_only">false</property>
    <property name="initialState">started</property>
    <property name="max_message_age">-1</property>
    <property name="store_messages">true</property>
    <property name="synchronous">true</property>
    <property name="transactional">false</property>
  </properties>
  <preprocessingScript>// Modify the message variable below to pre process data
return message;</preprocessingScript>
  <postprocessingScript>// This script executes once after a message has been processed
return;</postprocessingScript>
  <deployScript>// This script executes once when the channel is deployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</deployScript>
  <shutdownScript>// This script executes once when the channel is undeployed
// You only have access to the globalMap and globalChannelMap here to persist data
return;</shutdownScript>
</channel>