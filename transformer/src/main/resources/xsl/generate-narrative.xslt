<?xml version="1.0" encoding="utf-8"?>
<!-- ============================================================== -->
<!-- Created by Lantana Consulting Group, 2011 -->
<!-- ============================================================== -->
<xsl:transform version="1.1" xmlns="urn:hl7-org:v3" xmlns:cda="urn:hl7-org:v3" xmlns:xsl="http://www.w3.org/1999/XSL/Transform" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" exclude-result-prefixes="cda">
	<xsl:output method="xml" indent="yes" encoding="UTF-8"/>
	<!-- Note: Does not strip space in ClinicalDocument, structuredBody, component,
     or section because in the sample document there are linespaces to help
     readability. -->
	<xsl:strip-space elements="
            cda:recordTarget cda:patientRole cda:patient cda:name
            cda:author cda:assignedAuthor
            cda:custodian cda:assignedCustodian cda:representedCustodianOrganization
            cda:legalAuthenticator cda:assignedEntity
            cda:componentOf cda:encompassingEncounter cda:effectiveTime
            cda:location cda:healthCareFacility cda:addr
            cda:act cda:procedure cda:observation
            cda:entry cda:organizer cda:entryRelationship cda:component"/>
	<!-- ============================================================== -->
	<!-- ============================================================== -->
	<!--                    DEFAULT HANDLING: IDENTITY TRANSFORM        -->
	<!-- ============================================================== -->
	<!-- This template adds typeCode='DRIV' to the entry. This means
     that the corresponding information in the narrative block is
     derived entirely from the entry, which is true.

     If a later user interface allows entry directly into the
     narrative block, change this template accordingly. -->
	<xsl:template match="*|@*|comment()|processing-instruction()|text()">
		<xsl:if test="local-name()='ClinicalDocument'">
			<xsl:processing-instruction name="xml-stylesheet">
				<xsl:text>type="text/xsl" href="https://ncisvn.nci.nih.gov/svn/cacis/CACIS/trunk/technical_artifacts/xslt/CDA.xsl"</xsl:text>
			</xsl:processing-instruction>
			<xsl:text>&#10;</xsl:text>
		</xsl:if>
		<xsl:copy>
			<xsl:if test="self::cda:entry">
				<xsl:attribute name="typeCode">DRIV</xsl:attribute>
			</xsl:if>
			<xsl:apply-templates select="*|@*|comment()|processing-instruction()|text()"/>
		</xsl:copy>
	</xsl:template>
	<!-- ============================================================== -->
	<!--                    TOP-LEVEL SECTIONS                          -->
	<!-- ============================================================== -->
	<xsl:template match="cda:ClinicalDocument/cda:component/cda:structuredBody/cda:component/cda:section">
		<xsl:copy>
			<xsl:call-template name="start-section"/>
			<xsl:choose>
				<!-- Narrative text is generated by the main transform for this section, so copy the <text> element for this section anyways -->
				<xsl:when test="cda:code/@code='46240-8'">
					<xsl:apply-templates select="*[not(self::cda:title | self::cda:id | self::cda:code | self::cda:templateId)]"/>
				</xsl:when>
				<!-- For all other sections, create our own narrative using this transform, and copy all other elements with the second apply-templates -->
				<xsl:otherwise>
					<text>
						<xsl:apply-templates select="current()" mode="section-narrative"/>
					</text>
					<!-- back to the identity transform -->
					<xsl:apply-templates select="*[not(self::cda:title | self::cda:id | self::cda:code | self::cda:templateId | self::cda:text)]"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:copy>
	</xsl:template>
	<!-- named template: start-section -->
	<xsl:template name="start-section">
		<xsl:copy-of select="cda:templateId"/>
		<xsl:copy-of select="cda:id"/>
		<xsl:copy-of select="cda:code"/>
		<!-- section/title is required -->
		<title>
			<xsl:value-of select="cda:title"/>
		</title>
	</xsl:template>
	<!-- ============================================================== -->
	<!-- ============================================================== -->
	<!--                    SECTIONS SEGMENT                             -->
	<!-- ============================================================== -->
	<!-- ============================================================== -->
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.119']" name="vitalSigns" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<table border="1" width="100%">
			<thead>
				<tr>
					<th>Vital</th>
					<th>Value</th>
					<th>Date</th>
				</tr>
			</thead>
			<tbody>
				<xsl:for-each select="$section/cda:entry/cda:organizer/cda:component/cda:observation | $section/cda:entry/cda:observation">
					<tr>
						<th align="left">
							<xsl:if test="cda:text/cda:reference/@value">
								<xsl:attribute name="ID"><xsl:value-of select="cda:text/cda:reference/@value"/></xsl:attribute>
							</xsl:if>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="current()/cda:code"/>
							</xsl:call-template>
						</th>
						<td>
							<xsl:choose>
								<xsl:when test="local-name(current()/..) = 'component'">
									<xsl:call-template name="get-value">
										<xsl:with-param name="value" select="current()/cda:value"/>
									</xsl:call-template>
								</xsl:when>
								<xsl:otherwise>
									<xsl:value-of select="current()/cda:text"/>
								</xsl:otherwise>
							</xsl:choose>
						</td>
						<td>
							<xsl:call-template name="format-date">
								<xsl:with-param name="the-date" select="current()/cda:effectiveTime/@value"/>
							</xsl:call-template>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.10.20.1.4']" name="familyHistory" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<table border="1" width="100%">
			<thead>
				<tr>
					<th>Relative</th>
					<th>Cancer</th>
					<th>Genetic Marker</th>
				</tr>
			</thead>
			<tbody>
				<xsl:for-each select="$section/cda:entry/cda:organizer">
					<tr>
						<td>
							<xsl:if test="current()/cda:subject/cda:relatedSubject/cda:code">
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="current()/cda:subject/cda:relatedSubject/cda:code"/>
								</xsl:call-template>
							</xsl:if>
						</td>
						<td>
							<xsl:variable name="assertionValue" select="current()/cda:component/cda:observation[cda:code/@code='ASSERTION']/cda:value"/>
							<xsl:if test="$assertionValue">
								<xsl:attribute name="ID"><xsl:value-of select="current()/cda:component/cda:observation[cda:code/@code='ASSERTION']/cda:text/cda:reference/@value"/></xsl:attribute>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$assertionValue"/>
								</xsl:call-template>
							</xsl:if>
						</td>
						<td>
							<xsl:variable name="findingValue" select="current()/cda:component/cda:observation[cda:code/@code='20889005']/cda:value"/>
							<xsl:if test="$findingValue">
								<xsl:attribute name="ID"><xsl:value-of select="current()/cda:component/cda:observation[cda:code/@code='20889005']/cda:text/cda:reference/@value"/></xsl:attribute>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$findingValue"/>
								</xsl:call-template>
							</xsl:if>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.109']" name="functionalStatus" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<table border="1" width="100%">
			<thead>
				<tr>
					<th>Performance Status</th>
					<th>Level</th>
					<th>Date</th>
				</tr>
			</thead>
			<tbody>
				<xsl:for-each select="$section/cda:entry/cda:organizer/cda:component/cda:observation">
					<tr>
						<td>
							<xsl:attribute name="ID"><xsl:value-of select="current()/cda:text/cda:reference/@value"/></xsl:attribute>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="current()/cda:code"/>
							</xsl:call-template>
						</td>
						<td>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="current()/cda:value"/>
							</xsl:call-template>
						</td>
						<td>
							<xsl:call-template name="format-date">
								<xsl:with-param name="the-date" select="current()/cda:effectiveTime/@value"/>
							</xsl:call-template>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.103']" name="problems" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<xsl:if test="count($section/cda:entry)>0">
			<table border="1" width="100%">
				<tbody>
					<xsl:for-each select="$section/cda:entry[not(cda:act/cda:code/cda:originalText='Breast cancer history')]">
						<xsl:call-template name="make-problemEntry">
							<xsl:with-param name="problemEntry" select="current()"/>
						</xsl:call-template>
					</xsl:for-each>
				</tbody>
			</table>
		</xsl:if>
		<xsl:variable name="diagObs" select="$section/cda:entry[cda:act/cda:code/cda:originalText='Breast cancer history']/cda:act"/>
		<xsl:if test="$diagObs">
			<xsl:variable name="bcHist" select="$diagObs/cda:entryRelationship/cda:observation/cda:value[@code='429087003']/cda:originalText"/>
			<xsl:variable name="bcDiagObs" select="$diagObs/cda:entryRelationship[position()=2]/cda:observation"/>
			<xsl:variable name="bcDiagStr">
				<xsl:text>Breast cancer type: </xsl:text>
				<xsl:value-of select="$bcDiagObs/cda:value/cda:originalText"/>
				<xsl:text>  (</xsl:text>
				<xsl:value-of select="$bcDiagObs/cda:value/cda:qualifier/cda:name/@displayName"/>
				<xsl:text>=</xsl:text>
				<xsl:value-of select="$bcDiagObs/cda:value/cda:qualifier/cda:value/@displayName"/>
				<xsl:text>) diagnosed on </xsl:text>
				<xsl:call-template name="show-time">
					<xsl:with-param name="datetime" select="$bcDiagObs/cda:effectiveTime/cda:low"/>
				</xsl:call-template>
			</xsl:variable>
			<table border="1" width="100%">
				<caption>
					<xsl:value-of select="$bcHist"/>
				</caption>
				<tbody>
					<tr>
						<td>
							<xsl:value-of select="$bcDiagStr"/>
						</td>
						<td>
							<xsl:for-each select="$bcDiagObs/cda:entryRelationship/cda:observation">
								<xsl:variable name="kind" select="cda:code/cda:originalText"/>
								<xsl:variable name="val" select="cda:value"/>
								<xsl:value-of select="$kind"/>
								<xsl:text>=</xsl:text>
								<xsl:choose>
									<xsl:when test="$val/@xsi:type='ST'">
										<xsl:value-of select="$val"/>
									</xsl:when>
									<xsl:when test="$val/@xsi:type='PQ'">
										<xsl:value-of select="$val/@value"/>
										<xsl:text> </xsl:text>
										<xsl:value-of select="$val/@unit"/>
									</xsl:when>
								</xsl:choose>
								<xsl:text>;    </xsl:text>
							</xsl:for-each>
						</td>
					</tr>
				</tbody>
			</table>
		</xsl:if>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.10.20.1.2']" name="adverseEvent" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<xsl:if test="count($section/cda:entry)>0">
			<table border="1" width="100%">
				<tbody>
					<xsl:for-each select="$section/cda:entry">
						<xsl:call-template name="make-problemEntry">
							<xsl:with-param name="problemEntry" select="current()"/>
						</xsl:call-template>
					</xsl:for-each>
				</tbody>
			</table>
		</xsl:if>
	</xsl:template>
	<xsl:template name="make-problemEntry">
		<xsl:param name="problemEntry"/>
		<xsl:param name="problemObs" select="$problemEntry/cda:observation"/>
		<xsl:param name="problemAct" select="$problemEntry/cda:act"/>
		<xsl:variable name="pfmr">
			<xsl:call-template name="show-assignedEntity">
				<xsl:with-param name="asgnEntity" select="$problemAct/cda:performer/cda:assignedEntity"/>
			</xsl:call-template>
		</xsl:variable>
		<xsl:choose>
			<xsl:when test="$problemObs">
				<tr>
					<xsl:choose>
						<xsl:when test="$problemObs/cda:code[@code='ASSERTION']">
							<td>
								<xsl:if test="$problemObs/cda:text/cda:reference/@value">
									<xsl:attribute name="ID"><xsl:value-of select="$problemObs/cda:text/cda:reference/@value"/></xsl:attribute>
								</xsl:if>
								<xsl:if test="$problemObs/cda:methodCode">
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="$problemObs/cda:methodCode"/>
									</xsl:call-template>
									<xsl:text> -  </xsl:text>
								</xsl:if>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$problemObs/cda:value"/>
								</xsl:call-template>
								<xsl:call-template name="make-entryRelationshipOBS">
									<xsl:with-param name="obs" select="$problemObs"/>
									<xsl:with-param name="spNum" select="0"/>
								</xsl:call-template>
							</td>
							<td>
								<xsl:choose>
									<xsl:when test="$problemObs/@negationInd='true'">
										<xsl:text>no</xsl:text>
									</xsl:when>
									<xsl:when test="$problemObs/@nullFlavor='NASK'">
										<xsl:text>not assessed</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<xsl:text>yes</xsl:text>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:if test="$problemObs/cda:performer">
									<xsl:text> by </xsl:text>
									<xsl:choose>
										<xsl:when test="string-length($problemObs/cda:performer/cda:assignedEntity/cda:name)>0">
											<xsl:value-of select="$problemObs/cda:performer/cda:assignedEntity/cda:name"/>
										</xsl:when>
										<xsl:when test="string-length($problemObs/cda:performer/cda:assignedEntity/cda:id/@root)>0">
											<xsl:text> id: </xsl:text>
											<xsl:value-of select="$problemObs/cda:performer/cda:assignedEntity/cda:id/@root"/>
										</xsl:when>
									</xsl:choose>
								</xsl:if>
							</td>
						</xsl:when>
						<xsl:when test="$problemObs/cda:code[@code!='ASSERTION']">
							<td>
								<xsl:if test="cda:text/cda:reference/@value">
									<xsl:attribute name="ID"><xsl:value-of select="cda:text/cda:reference/@value"/></xsl:attribute>
								</xsl:if>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$problemObs/cda:code"/>
								</xsl:call-template>
								<br/>
								<xsl:call-template name="make-entryRelationshipOBS">
									<xsl:with-param name="obs" select="$problemObs"/>
									<xsl:with-param name="spNum" select="0"/>
								</xsl:call-template>
							</td>
							<td>
								<xsl:if test="$problemObs/cda:value">
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="$problemObs/cda:value"/>
									</xsl:call-template>
									<xsl:if test="$problemObs/cda:performer">
										<xsl:text> by </xsl:text>
										<xsl:value-of select="$problemObs/cda:performer/cda:assignedEntity/cda:name"/>
									</xsl:if>
								</xsl:if>
							</td>
						</xsl:when>
					</xsl:choose>
					<td>
						<xsl:choose>
							<xsl:when test="cda:effectiveTime">
								<xsl:call-template name="get-effectiveTime">
									<xsl:with-param name="effectiveTime" select="cda:effectiveTime"/>
								</xsl:call-template>
							</xsl:when>
							<xsl:otherwise>
								<xsl:text>No date information</xsl:text>
							</xsl:otherwise>
						</xsl:choose>
					</td>
				</tr>
			</xsl:when>
			<xsl:when test="$problemAct">
				<xsl:variable name="effTime" select="$problemAct/cda:effectiveTime"/>
				<xsl:if test="string-length($problemAct/cda:code/cda:originalText)>0 or not($problemAct/cda:code/@nullFlavor)">
					<xsl:variable name="actTitle">
						<xsl:call-template name="get-displayName">
							<xsl:with-param name="code" select="$problemAct/cda:code"/>
						</xsl:call-template>
					</xsl:variable>
					<tr>
						<th>
							<xsl:if test="$problemAct/cda:text/cda:reference/@value">
								<xsl:attribute name="ID"><xsl:value-of select="$problemAct/cda:text/cda:reference/@value"/></xsl:attribute>
							</xsl:if>
							<xsl:value-of select="$actTitle"/>
						</th>
						<th>
							<xsl:call-template name="get-effectiveTime">
								<xsl:with-param name="effectiveTime" select="$effTime"/>
							</xsl:call-template>
						</th>
						<th/>
					</tr>
				</xsl:if>
				<xsl:for-each select="$problemAct/cda:entryRelationship/cda:*">
					<tr>
						<xsl:choose>
							<xsl:when test="cda:code[@code='ASSERTION']">
								<td>
									<xsl:if test="cda:text/cda:reference/@value">
										<xsl:attribute name="ID"><xsl:value-of select="cda:text/cda:reference/@value"/></xsl:attribute>
									</xsl:if>
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="cda:value"/>
									</xsl:call-template>
									<xsl:call-template name="make-entryRelationshipOBS">
										<xsl:with-param name="obs" select="current()"/>
										<xsl:with-param name="spNum" select="0"/>
									</xsl:call-template>
								</td>
								<td>
									<xsl:choose>
										<xsl:when test="@negationInd='true'">
											<xsl:text>No</xsl:text>
										</xsl:when>
										<xsl:when test="$problemObs/@nullFlavor='NASK'">
											<xsl:text>not assessed</xsl:text>
										</xsl:when>
										<xsl:otherwise>
											<xsl:text>Yes</xsl:text>
										</xsl:otherwise>
									</xsl:choose>
									<xsl:if test="string-length($pfmr)>0">
										<xsl:text> by </xsl:text>
										<xsl:value-of select="$pfmr"/>
									</xsl:if>
								</td>
							</xsl:when>
							<xsl:when test="cda:code[@code!='ASSERTION'] or cda:code/cda:originalText">
								<td>
									<xsl:if test="cda:text/cda:reference/@value">
										<xsl:attribute name="ID"><xsl:value-of select="cda:text/cda:reference/@value"/></xsl:attribute>
									</xsl:if>
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="cda:code"/>
									</xsl:call-template>
								</td>
								<td>
									<xsl:for-each select="cda:value">
										<xsl:call-template name="get-displayName">
											<xsl:with-param name="code" select="current()"/>
										</xsl:call-template>
										<xsl:text>  </xsl:text>
									</xsl:for-each>
									<xsl:if test="cda:performer">
										<xsl:text> by </xsl:text>
										<xsl:choose>
											<xsl:when test="string-length(cda:performer/cda:assignedEntity/cda:name)>0">
												<xsl:value-of select="cda:performer/cda:assignedEntity/cda:name"/>
											</xsl:when>
											<xsl:when test="string-length(cda:performer/cda:assignedEntity/cda:id/@root)>0">
												<xsl:text> physician(id: </xsl:text>
												<xsl:value-of select="cda:performer/cda:assignedEntity/cda:id/@root"/>
												<xsl:text>)</xsl:text>
											</xsl:when>
										</xsl:choose>
									</xsl:if>
									<xsl:choose>
										<xsl:when test="cda:code[@displayName='therapeutic response']">
											<xsl:call-template name="make-entryRelationshipOBS">
												<xsl:with-param name="obs" select="current()"/>
												<xsl:with-param name="spNum" select="2"/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="make-entryRelationshipOBS">
												<xsl:with-param name="obs" select="current()"/>
												<xsl:with-param name="spNum" select="0"/>
											</xsl:call-template>
										</xsl:otherwise>
									</xsl:choose>
								</td>
							</xsl:when>
						</xsl:choose>
						<td>
							<xsl:choose>
								<xsl:when test="cda:effectiveTime">
									<xsl:call-template name="get-effectiveTime">
										<xsl:with-param name="effectiveTime" select="cda:effectiveTime"/>
									</xsl:call-template>
								</xsl:when>
								<xsl:otherwise>
									<xsl:text>No date information</xsl:text>
								</xsl:otherwise>
							</xsl:choose>
						</td>
					</tr>
				</xsl:for-each>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.126']" name="socialHistory" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<table border="1" width="100%">
			<thead>
				<tr>
					<th>Social History Element</th>
					<th>Description</th>
					<th>Effective Dates</th>
				</tr>
			</thead>
			<tbody>
				<xsl:for-each select="$section/cda:entry/cda:observation">
					<tr>
						<td>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="current()/cda:code"/>
							</xsl:call-template>
						</td>
						<td>
							<xsl:choose>
								<xsl:when test="current()/cda:text">
									<!-- Output the free text -->
									<xsl:value-of select="current()/cda:text"/>
								</xsl:when>
								<xsl:when test="current()/cda:value/@xsi:type = 'ST'">
									<xsl:value-of select="current()/cda:value"/>
								</xsl:when>
								<xsl:when test="current()/cda:effectiveTime/cda:width/@value">Total years: <xsl:value-of select="current()/cda:effectiveTime/cda:width/@value"/>
								</xsl:when>
								<xsl:otherwise>
									<!-- Output value and unit -->
									<xsl:choose>
										<xsl:when test="current()/cda:value/@value='0'">None</xsl:when>
										<xsl:when test="current()/cda:value[@code or cda:originalText]">
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="current()/cda:value"/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>
											<xsl:value-of select="current()/cda:value/@value"/>
											<xsl:choose>
												<xsl:when test="current()/cda:value/@unit='/wk'"> per week</xsl:when>
												<xsl:when test="current()/cda:value/@unit='{cigarettes}/wk'"> cigarettes per week</xsl:when>
												<xsl:when test="current()/cda:value/@unit='{drinks}/wk'"> drinks per week</xsl:when>
												<xsl:when test="current()/cda:value/@unit='{drugs}/wk'"> drugs per week</xsl:when>
											</xsl:choose>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:otherwise>
							</xsl:choose>
						</td>
						<td>
							<xsl:choose>
								<xsl:when test="current()/cda:effectiveTime[cda:low/@value and not(cda:high/@value)]">Year started: <xsl:value-of select="current()/cda:effectiveTime/cda:low/@value"/>
								</xsl:when>
								<xsl:when test="current()/cda:effectiveTime[not(cda:low/@value) and cda:high/@value]">Year quit: <xsl:value-of select="current()/cda:effectiveTime/cda:high/@value"/>
								</xsl:when>
								<xsl:when test="current()/cda:effectiveTime[cda:low/@value and cda:high/@value]">
									<xsl:call-template name="get-effectiveTime">
										<xsl:with-param name="effectiveTime" select="current()/cda:effectiveTime/cda:low"/>
									</xsl:call-template>
									<xsl:text> - </xsl:text>
									<xsl:call-template name="get-effectiveTime">
										<xsl:with-param name="effectiveTime" select="current()/cda:effectiveTime/cda:high"/>
									</xsl:call-template>
								</xsl:when>
							</xsl:choose>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.112']" name="medications" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<xsl:choose>
			<xsl:when test="count($section/cda:entry/cda:substanceAdministration)>0">
				<table border="1" width="100%">
					<thead>
						<tr>
							<th>Medication</th>
							<th>Date</th>
							<th>Dose</th>
							<th>Frequency</th>
							<th>Route</th>
							<th>Note</th>
						</tr>
					</thead>
					<tbody>
						<xsl:for-each select="$section/cda:entry/cda:substanceAdministration">
							<tr>
								<td>
									<xsl:choose>
										<xsl:when test="current()/cda:consumable/cda:manufacturedProduct/cda:manufacturedMaterial">
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="current()/cda:consumable/cda:manufacturedProduct/cda:manufacturedMaterial/cda:code"/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>No Information</xsl:otherwise>
									</xsl:choose>
								</td>
								<xsl:choose>
									<xsl:when test="not(./cda:effectiveTime) and not(./cda:doseQuantity) and not(cda:routeCode) and not(cda:entryRelationship)">
										<td colspan="5">
											<xsl:value-of select="./cda:text"/>
										</td>
									</xsl:when>
									<xsl:otherwise>
										<td>
											<xsl:choose>
												<xsl:when test="current()/cda:effectiveTime[@xsi:type='IVL_TS']">
													<xsl:call-template name="get-effectiveTime">
														<xsl:with-param name="effectiveTime" select="current()/cda:effectiveTime[@xsi:type='IVL_TS']"/>
													</xsl:call-template>
												</xsl:when>
											</xsl:choose>
										</td>
										<td>
											<xsl:choose>
												<xsl:when test="current()/cda:doseQuantity">
													<xsl:call-template name="get-displayName">
														<xsl:with-param name="code" select="current()/cda:doseQuantity"/>
													</xsl:call-template>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text>no information</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</td>
										<td>
											<xsl:choose>
												<xsl:when test="current()/cda:effectiveTime[@xsi:type='PIVL_TS']/cda:period/cda:translation/cda:originalText">
													<xsl:value-of select="current()/cda:effectiveTime[@xsi:type='PIVL_TS']/cda:period/cda:translation/cda:originalText"/>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text>no information</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</td>
										<td>
											<xsl:choose>
												<xsl:when test="current()/cda:routeCode">
													<xsl:call-template name="get-displayName">
														<xsl:with-param name="code" select="current()/cda:routeCode"/>
													</xsl:call-template>
												</xsl:when>
												<xsl:otherwise>
													<xsl:text>no information</xsl:text>
												</xsl:otherwise>
											</xsl:choose>
										</td>
										<td>
											<xsl:for-each select="cda:entryRelationship">
												<xsl:choose>
													<xsl:when test="@typeCode='RSON'">
														<xsl:text>Reason:</xsl:text>
														<xsl:text> </xsl:text>
														<xsl:value-of select="cda:observation/cda:value/cda:originalText"/>
														<br/>
													</xsl:when>
													<xsl:when test="@typeCode='REFR'">
														<xsl:if test="cda:observation/cda:code/@code!='Assertion'">
															<xsl:value-of select="cda:observation/cda:code/cda:originalText"/>
															<xsl:text>  </xsl:text>
														</xsl:if>
														<xsl:value-of select="cda:observation/cda:value/cda:originalText"/>
														<br/>
													</xsl:when>
												</xsl:choose>
											</xsl:for-each>
										</td>
									</xsl:otherwise>
								</xsl:choose>
							</tr>
						</xsl:for-each>
					</tbody>
				</table>
			</xsl:when>
			<xsl:when test="count($section/cda:entry/cda:procedure)>0">
				<table border="1" width="100%">
					<thead>
						<tr>
							<th>Chemo Treatment</th>
							<th>Date</th>
							<th>Treatment End Reason</th>
							<th>Detail</th>
						</tr>
					</thead>
					<tbody>
						<xsl:for-each select="$section/cda:entry/cda:procedure">
							<tr>
								<td>
									<xsl:choose>
										<xsl:when test="current()/cda:code">
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="current()/cda:code"/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>No Information</xsl:otherwise>
									</xsl:choose>
								</td>
								<td>
									<xsl:if test="current()/cda:effectiveTime[@xsi:type='IVL_TS']">
										<xsl:call-template name="get-effectiveTime">
											<xsl:with-param name="effectiveTime" select="current()/cda:effectiveTime[@xsi:type='IVL_TS']"/>
										</xsl:call-template>
									</xsl:if>
								</td>
						        <xsl:choose>
									<xsl:when test="cda:entryRelationship/cda:observation">
																		<td>
										<xsl:if test="cda:entryRelationship/cda:observation/cda:code">
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="cda:entryRelationship/cda:observation/cda:code"/>
											</xsl:call-template>
										</xsl:if>
										<xsl:text>:  </xsl:text>
										<xsl:if test="cda:entryRelationship/cda:observation/cda:value">
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="cda:entryRelationship/cda:observation/cda:value"/>
											</xsl:call-template>
										</xsl:if>
									</td>
									</xsl:when>
									<xsl:otherwise>
										<td> </td>
									</xsl:otherwise>
								</xsl:choose>
								<xsl:choose>
									<xsl:when test="cda:entryRelationship/cda:substanceAdministration">
									<td>   
										<xsl:choose>
											<xsl:when test="cda:entryRelationship/cda:substanceAdministration/cda:consumable/cda:manufacturedProduct/cda:manufacturedMaterial">
												<xsl:call-template name="get-displayName">
													<xsl:with-param name="code" select="cda:entryRelationship/cda:substanceAdministration/cda:consumable/cda:manufacturedProduct/cda:manufacturedMaterial/cda:code"/>
												</xsl:call-template>
											</xsl:when>
											<xsl:otherwise>No Medication Information</xsl:otherwise>
										</xsl:choose>
										<xsl:choose>
											<xsl:when test="cda:entryRelationship/cda:substanceAdministration/cda:repeatNumber">
												<xsl:text> Completed Circles:</xsl:text>
												<xsl:value-of select="cda:entryRelationship/cda:substanceAdministration/cda:repeatNumber/@value"/>
											</xsl:when>
										</xsl:choose>
										<xsl:for-each select="cda:entryRelationship/cda:substanceAdministration/cda:entryRelationship/cda:observation">
											<xsl:text> | </xsl:text>
											<xsl:choose>
												<xsl:when test="current()/cda:code">
													<xsl:call-template name="get-displayName">
														<xsl:with-param name="code" select="current()/cda:code"/>
													</xsl:call-template>
												</xsl:when>
												<xsl:otherwise>No Information</xsl:otherwise>
											</xsl:choose>
											<xsl:text>:</xsl:text>
											<xsl:value-of select="current()/cda:value"/>
										</xsl:for-each>
									</td>
									</xsl:when>
									<xsl:otherwise>
										<td> </td>
									</xsl:otherwise>
								</xsl:choose>
							</tr>
						</xsl:for-each>
					</tbody>
				</table>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.120']" name="systems" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<table border="1" width="100%">
			<thead>
				<tr>
					<th>Subject</th>
					<th>Value</th>
				</tr>
			</thead>
			<tbody>
				<xsl:for-each select="$section/cda:entry/cda:observation | $section/cda:entry/cda:observation/cda:entryRelationship/cda:observation">
					<tr>
						<td>
							<xsl:if test="current()/cda:text/cda:reference/@value">
								<xsl:attribute name="ID"><xsl:value-of select="current()/cda:text/cda:reference/@value"/></xsl:attribute>
							</xsl:if>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="current()/cda:code"/>
							</xsl:call-template>
						</td>
						<td>
							<xsl:choose>
								<xsl:when test="current()/cda:effectiveTime[not(@nullFlavor)]">
									<xsl:call-template name="get-effectiveTime">
										<xsl:with-param name="effectiveTime" select="current()/cda:effectiveTime"/>
									</xsl:call-template>
								</xsl:when>
								<xsl:when test="current()/cda:value[@xsi-type = 'ST']">
									<xsl:value-of select="current()/cda:value"/>
								</xsl:when>
								<xsl:when test="current()/cda:value">
									<xsl:value-of select="current()/cda:value/@value"/>
									<xsl:choose>
										<xsl:when test="current()/cda:value/@unit = 'a'"> (age)</xsl:when>
									</xsl:choose>
								</xsl:when>
							</xsl:choose>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
		<xsl:if test="$section/cda:entry/cda:organizer">
			<table border="1" width="100%">
				<thead>
					<tr>
						<th>System</th>
						<th>Normal</th>
						<th>Abnormal</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$section/cda:entry/cda:organizer">
						<xsl:variable name="normalEntries" select="current()/cda:component/cda:observation[cda:interpretationCode/@code='N' or (@negationInd = 'true' and cda:interpretationCode/@code = 'A')]"/>
						<xsl:variable name="abnormalEntries" select="current()/cda:component/cda:observation[cda:interpretationCode/@code='A' and not(@negationInd)]"/>
						<tr>
							<td>
								<xsl:value-of select="current()/cda:code/cda:originalText"/>
							</td>
							<td>
								<xsl:if test="$normalEntries">Normal (<xsl:for-each select="$normalEntries">
										<xsl:if test="position() > 1">
											<xsl:text>, </xsl:text>
										</xsl:if>
										<xsl:call-template name="get-displayName">
											<xsl:with-param name="code" select="current()/cda:value"/>
										</xsl:call-template>
									</xsl:for-each>)</xsl:if>
							</td>
							<td>
								<xsl:if test="$abnormalEntries">Abnormal (<xsl:for-each select="$abnormalEntries">
										<xsl:if test="position() > 1">
											<xsl:text>, </xsl:text>
										</xsl:if>
										<xsl:call-template name="get-displayName">
											<xsl:with-param name="code" select="current()/cda:value"/>
										</xsl:call-template>
									</xsl:for-each>)</xsl:if>
							</td>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</xsl:if>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.145']" name="procedures" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<xsl:if test="$section/cda:entry/cda:procedure">
			<table border="1" width="100%">
				<thead>
					<tr>
						<th>Procedure</th>
						<th>Performed?</th>
						<th>Date</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="$section/cda:entry/cda:procedure">
						<tr>
							<td>
								<xsl:if test="current()/cda:text/cda:reference/@value">
									<xsl:attribute name="ID"><xsl:value-of select="current()/cda:text/cda:reference/@value"/></xsl:attribute>
								</xsl:if>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="current()/cda:code"/>
								</xsl:call-template>
								<!--method code-->
								<xsl:if test="current()/cda:methodCode">
									<br/>Procedure method: 
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="current()/cda:methodCode"/>
									</xsl:call-template>
								</xsl:if>
								<!--target site-->
								<xsl:if test="current()/cda:targetSiteCode">
									<br/>Procedure site: 
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="current()/cda:targetSiteCode"/>
									</xsl:call-template>
								</xsl:if>
								<xsl:for-each select="cda:entryRelationship/cda:observation">
									<xsl:text>; </xsl:text>
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="cda:code"/>
									</xsl:call-template>
									<xsl:text>: </xsl:text>
									<xsl:choose>
										<xsl:when test="cda:value/@code">
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="cda:value"/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="get-value">
												<xsl:with-param name="value" select="cda:value"/>
											</xsl:call-template>
										</xsl:otherwise>
									</xsl:choose>
								</xsl:for-each>
							</td>
							<td>
								<xsl:choose>
									<xsl:when test="current()/@negationInd = 'true'">No</xsl:when>
									<xsl:otherwise>Yes</xsl:otherwise>
								</xsl:choose>
								<xsl:if test="cda:performer">
									<xsl:text> - by </xsl:text>
									<xsl:call-template name="show-assignedEntity">
										<xsl:with-param name="asgnEntity" select="$section/cda:entry/cda:procedure/cda:performer/cda:assignedEntity"/>
									</xsl:call-template>
								</xsl:if>
							</td>
							<td>
								<xsl:choose>
									<xsl:when test="current()/cda:effectiveTime[not(@nullFlavor) and not(cda:low/@nullFlavor)]">
										<xsl:call-template name="get-effectiveTime">
											<xsl:with-param name="effectiveTime" select="current()/cda:effectiveTime"/>
										</xsl:call-template>
									</xsl:when>
									<xsl:otherwise>N/A</xsl:otherwise>
								</xsl:choose>
							</td>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</xsl:if>
		<xsl:for-each select="cda:entry/cda:organizer">
			<table border="1" width="100%">
				<caption>
					<xsl:call-template name="get-displayName">
						<xsl:with-param name="code" select="cda:code"/>
					</xsl:call-template>
				</caption>
				<thead>
					<tr>
						<th>Procedure</th>
						<th>Date</th>
						<th>Results</th>
					</tr>
				</thead>
				<tbody>
					<xsl:for-each select="cda:component/cda:procedure">
						<tr>
							<td>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="cda:code"/>
								</xsl:call-template>
							</td>
							<td>
								<xsl:call-template name="get-effectiveTime">
									<xsl:with-param name="effectiveTime" select="cda:effectiveTime"/>
								</xsl:call-template>
							</td>
							<td>
								<list>
									<xsl:for-each select="cda:entryRelationship/cda:observation">
										<item>
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="cda:code"/>
											</xsl:call-template>
											<xsl:text>: </xsl:text>
											<xsl:choose>
												<xsl:when test="cda:value/@xsi:type='ST'">
													<xsl:value-of select="cda:value"/>
												</xsl:when>
												<xsl:when test="cda:value/@code or cda:value/cda:originalText">
													<xsl:call-template name="get-displayName">
														<xsl:with-param name="code" select="cda:value"/>
													</xsl:call-template>
												</xsl:when>
												<xsl:when test="cda:value/@value">
													<xsl:call-template name="get-value">
														<xsl:with-param name="code" select="cda:value"/>
													</xsl:call-template>
												</xsl:when>
											</xsl:choose>
										</item>
									</xsl:for-each>
								</list>
							</td>
						</tr>
					</xsl:for-each>
				</tbody>
			</table>
		</xsl:for-each>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.122']" name="diagnosticResult" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<table border="1" width="100%">
			<tbody>
				<xsl:for-each select="$section/cda:entry">
					<xsl:call-template name="make-resultEntry">
						<xsl:with-param name="rstEntry" select="current()"/>
					</xsl:call-template>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>
	<xsl:template name="make-resultEntry">
		<xsl:param name="rstEntry"/>
		<xsl:param name="rstObs" select="$rstEntry/cda:observation"/>
		<xsl:param name="rstOrg" select="$rstEntry/cda:organizer"/>
		<xsl:param name="rstProc" select="$rstEntry/cda:procedure"/>
		<tr>
			<xsl:choose>
				<xsl:when test="$rstObs">
					<xsl:choose>
						<xsl:when test="$rstObs/cda:code[@code='ASSERTION']">
							<td>
								<xsl:if test="$rstObs/cda:text/cda:reference/@value">
									<xsl:attribute name="ID"><xsl:value-of select="$rstObs/cda:text/cda:reference/@value"/></xsl:attribute>
								</xsl:if>
								<xsl:if test="$rstObs/cda:methodCode">
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="$rstObs/cda:methodCode"/>
									</xsl:call-template>
									<xsl:text> -  </xsl:text>
								</xsl:if>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$rstObs/cda:value"/>
								</xsl:call-template>
							</td>
							<td>
								<xsl:choose>
									<xsl:when test="$rstObs/@negationInd='true'">
										<xsl:text>no</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<xsl:text>yes</xsl:text>
									</xsl:otherwise>
								</xsl:choose>
							</td>
						</xsl:when>
						<xsl:when test="$rstObs/cda:code[@code!='ASSERTION']">
							<td>
								<xsl:if test="cda:text/cda:reference/@value">
									<xsl:attribute name="ID"><xsl:value-of select="cda:text/cda:reference/@value"/></xsl:attribute>
								</xsl:if>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$rstObs/cda:code"/>
								</xsl:call-template>
							</td>
							<td>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$rstObs/cda:value"/>
								</xsl:call-template>
							</td>
						</xsl:when>
					</xsl:choose>
				</xsl:when>
				<xsl:when test="$rstOrg">
					<td>
						<xsl:call-template name="get-displayName">
							<xsl:with-param name="code" select="$rstOrg/cda:code"/>
						</xsl:call-template>
					</td>
					<td>
						<xsl:for-each select="$rstOrg/cda:component/cda:observation">
							<xsl:if test="position() &gt; 1">
								<br/>
							</xsl:if>
							<xsl:call-template name="displayCodeValuePair">
								<xsl:with-param name="clinicalStatement" select="current()"/>
							</xsl:call-template>
						</xsl:for-each>
					</td>
				</xsl:when>
				<xsl:when test="$rstProc">
					<td>
						<xsl:call-template name="get-displayName">
							<xsl:with-param name="code" select="$rstProc/cda:code"/>
						</xsl:call-template>
						<xsl:text>: </xsl:text>
						<xsl:call-template name="get-displayName">
							<xsl:with-param name="code" select="$rstProc/cda:code/cda:qualifier/cda:value"/>
						</xsl:call-template>
					</td>
					<td>
						<list>
							<caption>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="$rstProc/cda:entryRelationship/cda:procedure/cda:code"/>
								</xsl:call-template>
							</caption>
							<xsl:if test="$rstProc/cda:entryRelationship/cda:procedure/cda:methodCode">
								<item>
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="$rstProc/cda:entryRelationship/cda:procedure/cda:methodCode"/>
									</xsl:call-template>
								</item>
							</xsl:if>
							<xsl:for-each select="$rstProc/cda:entryRelationship/cda:procedure/cda:entryRelationship/cda:*">
								<item>
									<xsl:if test="cda:code/@code != 'ASSERTION'">
										<xsl:call-template name="get-displayName">
											<xsl:with-param name="code" select="cda:code"/>
										</xsl:call-template>
										<xsl:text>: </xsl:text>
									</xsl:if>
									<xsl:choose>
										<xsl:when test="cda:value[@xsi:type='INT' or @xsi:type='PQ']">
											<xsl:call-template name="get-value">
												<xsl:with-param name="value" select="cda:value"/>
											</xsl:call-template>
										</xsl:when>
										<xsl:otherwise>
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="cda:value"/>
											</xsl:call-template>
										</xsl:otherwise>
									</xsl:choose>
								</item>
							</xsl:for-each>
						</list>
					</td>
				</xsl:when>
			</xsl:choose>
		</tr>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.118']" name="physicalExam" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<xsl:if test="$section/cda:component/cda:section">
			<xsl:if test="count($section/cda:component/cda:section[cda:code/@code  != '10193-1'])>0">
				<table border="1" width="100%">
					<tbody>
						<xsl:for-each select="$section/cda:component/cda:section[cda:code/@code  != '10193-1']">
							<tr>
								<td>
									<xsl:call-template name="get-displayName">
										<xsl:with-param name="code" select="current()/cda:code"/>
									</xsl:call-template>
								</td>
								<td>
									<xsl:text>Normal: </xsl:text>
									<xsl:for-each select="current()/cda:entry/cda:observation[cda:interpretationCode/@code = 'N' or (cda:interpretationCode/@code='A' and @negationInd='true')]">
										<xsl:if test="position() &gt; 1">
											<xsl:text>, </xsl:text>
										</xsl:if>
										<xsl:call-template name="get-displayName">
											<xsl:with-param name="code" select="current()/cda:value"/>
										</xsl:call-template>
									</xsl:for-each>
									<br/>
									<xsl:text>Abormal: </xsl:text>
									<xsl:for-each select="current()/cda:entry/cda:observation[cda:interpretationCode/@code = 'A' and not(@negationInd)]">
										<xsl:if test="position() &gt; 1">
											<xsl:text>, </xsl:text>
										</xsl:if>
										<xsl:call-template name="get-displayName">
											<xsl:with-param name="code" select="current()/cda:value"/>
										</xsl:call-template>
									</xsl:for-each>
								</td>
							</tr>
						</xsl:for-each>
					</tbody>
				</table>
			</xsl:if>
			<xsl:apply-templates select="$section/cda:component/cda:section[cda:code/@code= '10193-1']" mode="section-narrative"/>
		</xsl:if>
	</xsl:template>
	<xsl:template match="cda:section[cda:code/@code = '10193-1']" name="physicalExam_breastExams" mode="section-narrative">
		<table border="1" width="100%">
			<caption>Breast Exam</caption>
			<tbody>
				<tr>
					<th>Type</th>
					<th>Date</th>
					<th>Abnormality</th>
				</tr>
				<xsl:for-each select="cda:entry/cda:act">
					<tr>
						<td>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="cda:code"/>
							</xsl:call-template>
						</td>
						<td>
							<xsl:call-template name="get-effectiveTime">
								<xsl:with-param name="effectiveTime" select="cda:effectiveTime"/>
							</xsl:call-template>
						</td>
						<td>
							<xsl:choose>
								<xsl:when test="count(cda:entryRelationship) = 1">
									<list>
										<caption>
											<xsl:call-template name="get-displayName">
												<xsl:with-param name="code" select="cda:entryRelationship/cda:observation/cda:value"/>
											</xsl:call-template>
										</caption>
										<xsl:if test="cda:entryRelationship/cda:observation/cda:entryRelationship/cda:observation">
											<xsl:for-each select="cda:entryRelationship/cda:observation/cda:entryRelationship/cda:observation">
												<item>
													<xsl:choose>
														<xsl:when test="cda:code/@code = 'ASSERTION'">
															<xsl:call-template name="get-displayName">
																<xsl:with-param name="code" select="cda:value"/>
															</xsl:call-template>
															<xsl:choose>
																<xsl:when test="@negationInd='true'">
																	<xsl:text>: no</xsl:text>
																</xsl:when>
																<xsl:when test="@negationInd='false' or not(@negationInd)">
																	<xsl:text>: yes</xsl:text>
																</xsl:when>
															</xsl:choose>
														</xsl:when>
														<xsl:otherwise>
															<xsl:call-template name="get-displayName">
																<xsl:with-param name="code" select="cda:code"/>
															</xsl:call-template>
															<xsl:text>: </xsl:text>
															<xsl:call-template name="get-value">
																<xsl:with-param name="value" select="cda:value"/>
															</xsl:call-template>
														</xsl:otherwise>
													</xsl:choose>
												</item>
											</xsl:for-each>
										</xsl:if>
									</list>
								</xsl:when>
								<xsl:otherwise>
									<xsl:for-each select="cda:entryRelationship/cda:*">
										<xsl:choose>
											<xsl:when test="cda:value/@code='125148006'">
												<xsl:call-template name="get-displayName">
													<xsl:with-param name="code" select="cda:value"/>
												</xsl:call-template>
												<xsl:text>: </xsl:text>
												<xsl:call-template name="get-displayName">
													<xsl:with-param name="code" select="cda:entryRelationship/cda:observation/cda:code"/>
												</xsl:call-template>
											</xsl:when>
											<xsl:when test="cda:entryRelationship">
												<list>
													<caption>
														<xsl:call-template name="get-displayName">
															<xsl:with-param name="code" select="current()/cda:value"/>
														</xsl:call-template>
													</caption>
													<xsl:for-each select="cda:entryRelationship/cda:*">
														<item>
															<xsl:if test="cda:code/@code != 'ASSERTION'">
																<xsl:call-template name="get-displayName">
																	<xsl:with-param name="code" select="cda:code"/>
																</xsl:call-template>
																<xsl:text>: </xsl:text>
															</xsl:if>
															<xsl:choose>
																<xsl:when test="cda:value/@xsi:type='ST'">
																	<xsl:value-of select="cda:value"/>
																</xsl:when>
																<xsl:when test="cda:value/@value">
																	<xsl:call-template name="get-value">
																		<xsl:with-param name="value" select="cda:value"/>
																	</xsl:call-template>
																</xsl:when>
																<xsl:when test="cda:value/@code">
																	<xsl:call-template name="get-displayName">
																		<xsl:with-param name="code" select="cda:value"/>
																	</xsl:call-template>
																</xsl:when>
															</xsl:choose>
														</item>
													</xsl:for-each>
												</list>
											</xsl:when>
											<xsl:otherwise>
												<xsl:if test="cda:code/@code != 'ASSERTION'">
													<xsl:call-template name="get-displayName">
														<xsl:with-param name="code" select="cda:code"/>
													</xsl:call-template>
													<xsl:text>: </xsl:text>
												</xsl:if>
												<xsl:choose>
													<xsl:when test="cda:value/@value">
														<xsl:call-template name="get-value">
															<xsl:with-param name="value" select="cda:value"/>
														</xsl:call-template>
													</xsl:when>
													<xsl:otherwise>
														<xsl:call-template name="get-displayName">
															<xsl:with-param name="code" select="cda:value"/>
														</xsl:call-template>
													</xsl:otherwise>
												</xsl:choose>
											</xsl:otherwise>
										</xsl:choose>
										<br/>
									</xsl:for-each>
								</xsl:otherwise>
							</xsl:choose>
						</td>
					</tr>
				</xsl:for-each>
			</tbody>
		</table>
	</xsl:template>
	<xsl:template match="cda:section[cda:templateId/@root='2.16.840.1.113883.3.88.11.83.124']" name="planOfCare" mode="section-narrative">
		<xsl:param name="section" select="current()"/>
		<xsl:for-each select="$section/cda:entry/cda:act">
			<list>
				<caption>
					<xsl:value-of select="cda:code/cda:originalText"/>
				</caption>
				<xsl:for-each select="cda:entryRelationship/cda:act">
					<item>
						<xsl:choose>
							<xsl:when test="cda:text">Other: <xsl:value-of select="cda:text"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="cda:code"/>
								</xsl:call-template>
							</xsl:otherwise>
						</xsl:choose>
					</item>
				</xsl:for-each>
			</list>
		</xsl:for-each>
	</xsl:template>
	<xsl:template name="make-entryRelationshipOBS">
		<xsl:param name="obs"/>
		<xsl:param name="spNum"/>
		<xsl:for-each select="$obs/cda:entryRelationship/cda:*">
			<xsl:choose>
				<xsl:when test="self::cda:observation">
					<xsl:choose>
						<xsl:when test="cda:code[@code='ASSERTION']">
							<br/>
							<xsl:call-template name="spaceLoop">
								<xsl:with-param name="i" select="0"/>
								<xsl:with-param name="count" select="$spNum"/>
							</xsl:call-template>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="cda:value"/>
							</xsl:call-template>
							<xsl:choose>
								<xsl:when test="@negationInd='true'">
									<xsl:text>: no</xsl:text>
								</xsl:when>
								<xsl:when test="@nullFlavor='NASK'">
									<xsl:text>: not assessed</xsl:text>
								</xsl:when>
								<xsl:otherwise>
									<xsl:text>: yes</xsl:text>
								</xsl:otherwise>
							</xsl:choose>
						</xsl:when>
						<xsl:when test="cda:code[@code!='ASSERTION' or @nullFlavor]">
							<br/>
							<xsl:call-template name="spaceLoop">
								<xsl:with-param name="i" select="0"/>
								<xsl:with-param name="count" select="$spNum"/>
							</xsl:call-template>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="cda:code"/>
							</xsl:call-template>
							<xsl:text>: </xsl:text>
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="cda:value"/>
							</xsl:call-template>
						</xsl:when>
					</xsl:choose>
					<xsl:if test="cda:effectiveTime/@value">
						<xsl:text> at </xsl:text>
						<xsl:call-template name="get-effectiveTime">
							<xsl:with-param name="effectiveTime" select="cda:effectiveTime"/>
						</xsl:call-template>
					</xsl:if>
					<xsl:variable name="newSp">
						<xsl:choose>
							<xsl:when test="number($spNum)&lt;1">
								<xsl:value-of select="2"/>
							</xsl:when>
							<xsl:otherwise>
								<xsl:value-of select="number($spNum) + 4"/>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:variable>
					<xsl:if test="count(current()/cda:entryRelationship)>0">
						<xsl:call-template name="make-entryRelationshipOBS">
							<xsl:with-param name="obs" select="current()"/>
							<xsl:with-param name="spNum" select="$newSp"/>
						</xsl:call-template>
					</xsl:if>
				</xsl:when>
				<xsl:when test="self::cda:act">
					<xsl:if test="string-length(cda:code/cda:originalText)>0 or not(cda:code/@nullFlavor)">
						<xsl:variable name="actTitle">
							<xsl:call-template name="get-displayName">
								<xsl:with-param name="code" select="cda:code"/>
							</xsl:call-template>
						</xsl:variable>
						<br/>
						<xsl:text>--</xsl:text>
						<xsl:value-of select="$actTitle"/>
					</xsl:if>
					<xsl:for-each select="cda:entryRelationship/cda:observation">
						<br/>
						<xsl:choose>
							<xsl:when test="cda:code[@code='ASSERTION']">
								<xsl:if test="cda:text/cda:reference/@value">
									<xsl:attribute name="ID"><xsl:value-of select="cda:text/cda:reference/@value"/></xsl:attribute>
								</xsl:if>
								<xsl:text>------</xsl:text>
								<xsl:call-template name="get-displayName">
									<xsl:with-param name="code" select="cda:value"/>
								</xsl:call-template>
								<xsl:text> </xsl:text>
								<xsl:choose>
									<xsl:when test="@negationInd='true'">
										<xsl:text>No</xsl:text>
									</xsl:when>
									<xsl:when test="@nullFlavor='NASK'">
										<xsl:text>not assessed</xsl:text>
									</xsl:when>
									<xsl:otherwise>
										<xsl:text>Yes</xsl:text>
									</xsl:otherwise>
								</xsl:choose>
							</xsl:when>
						</xsl:choose>
					</xsl:for-each>
				</xsl:when>
				<xsl:when test="self::cda:procedure">
					<br/>
					<xsl:call-template name="spaceLoop">
						<xsl:with-param name="i" select="0"/>
						<xsl:with-param name="count" select="$spNum"/>
					</xsl:call-template>
					<xsl:call-template name="get-displayName">
						<xsl:with-param name="code" select="cda:code"/>
					</xsl:call-template>
					<xsl:text>: </xsl:text>
					<xsl:call-template name="get-displayName">
						<xsl:with-param name="code" select="cda:value"/>
					</xsl:call-template>
				</xsl:when>
			</xsl:choose>
		</xsl:for-each>
	</xsl:template>
	<!-- ============================================================== -->
	<!-- ============================================================== -->
	<!--                    ENTRIES SEGMENT                             -->
	<!-- ============================================================== -->
	<!-- ============================================================== -->
	<!-- This template ensures that by default we stay in generate-
     narrative mode while creating the text block. -->
	<xsl:template match="*" mode="generate-narrative">
		<xsl:apply-templates select="*" mode="generate-narrative"/>
	</xsl:template>
	<!-- ============================================================== -->
	<!-- ============================================================== -->
	<!--                    UTILITIES SEGMENT                           -->
	<!-- ============================================================== -->
	<!-- TODO: handles comparison with facility id for pop-sum, need add single-patient -->
	<xsl:template match="cda:id" mode="show-id">
		<xsl:text>ID </xsl:text>
		<xsl:value-of select="@extension"/>
		<xsl:if test="not(contains(@root, /cda:ClinicalDocument/cda:participant[@typeCode='LOC']/cda:associatedEntity[@classCode='SDLOC']/cda:id/@root))">
			<xsl:text> (Facility </xsl:text>
			<xsl:value-of select="@root"/>
			<xsl:text>)</xsl:text>
		</xsl:if>
	</xsl:template>
	<xsl:template name="get-truthValue">
		<xsl:choose>
			<xsl:when test="@negationInd='false'">Yes</xsl:when>
			<xsl:when test="@negationInd='true'">No</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="get-quantity">
		<xsl:value-of select="@value"/>
		<xsl:text> </xsl:text>
		<!-- specify the unit too, except in a Population Summary Report,
       where the label already does that.-->
		<xsl:if test="not(/cda:ClinicalDocument/cda:templateId/@root='2.16.840.1.113883.10.20.5.15')">
			<xsl:value-of select="@unit"/>
		</xsl:if>
	</xsl:template>
	<!-- ============================================================== -->
	<!--                    GENERAL UTILITIES                           -->
	<!-- ============================================================== -->
	<!-- show time -->
	<xsl:template name="show-time">
		<xsl:param name="datetime"/>
		<xsl:choose>
			<xsl:when test="not($datetime)">
				<xsl:call-template name="formatDateTime">
					<xsl:with-param name="date" select="@value"/>
				</xsl:call-template>
				<xsl:text> </xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:call-template name="formatDateTime">
					<xsl:with-param name="date" select="$datetime/@value"/>
				</xsl:call-template>
				<xsl:text> </xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- format DateTime -->
	<xsl:template name="formatDateTime">
		<xsl:param name="date"/>
		<!-- month -->
		<xsl:variable name="month" select="substring ($date, 5, 2)"/>
		<xsl:choose>
			<xsl:when test="$month='01'">
				<xsl:text>January </xsl:text>
			</xsl:when>
			<xsl:when test="$month='02'">
				<xsl:text>February </xsl:text>
			</xsl:when>
			<xsl:when test="$month='03'">
				<xsl:text>March </xsl:text>
			</xsl:when>
			<xsl:when test="$month='04'">
				<xsl:text>April </xsl:text>
			</xsl:when>
			<xsl:when test="$month='05'">
				<xsl:text>May </xsl:text>
			</xsl:when>
			<xsl:when test="$month='06'">
				<xsl:text>June </xsl:text>
			</xsl:when>
			<xsl:when test="$month='07'">
				<xsl:text>July </xsl:text>
			</xsl:when>
			<xsl:when test="$month='08'">
				<xsl:text>August </xsl:text>
			</xsl:when>
			<xsl:when test="$month='09'">
				<xsl:text>September </xsl:text>
			</xsl:when>
			<xsl:when test="$month='10'">
				<xsl:text>October </xsl:text>
			</xsl:when>
			<xsl:when test="$month='11'">
				<xsl:text>November </xsl:text>
			</xsl:when>
			<xsl:when test="$month='12'">
				<xsl:text>December </xsl:text>
			</xsl:when>
		</xsl:choose>
		<!-- day -->
		<xsl:choose>
			<xsl:when test='substring ($date, 7, 1)="0"'>
				<xsl:value-of select="substring ($date, 8, 1)"/>
				<xsl:text>, </xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="substring ($date, 7, 2)"/>
				<xsl:text>, </xsl:text>
			</xsl:otherwise>
		</xsl:choose>
		<!-- year -->
		<xsl:value-of select="substring ($date, 1, 4)"/>
		<!-- time and US timezone -->
		<xsl:if test="string-length($date) > 8">
			<xsl:text>, </xsl:text>
			<!-- time -->
			<xsl:variable name="time">
				<xsl:value-of select="substring($date,9,6)"/>
			</xsl:variable>
			<xsl:variable name="hh">
				<xsl:value-of select="substring($time,1,2)"/>
			</xsl:variable>
			<xsl:variable name="mm">
				<xsl:value-of select="substring($time,3,2)"/>
			</xsl:variable>
			<xsl:variable name="ss">
				<xsl:value-of select="substring($time,5,2)"/>
			</xsl:variable>
			<xsl:if test="string-length($hh)&gt;1">
				<xsl:value-of select="$hh"/>
				<xsl:if test="string-length($mm)&gt;1 and not(contains($mm,'-')) and not (contains($mm,'+'))">
					<xsl:text>:</xsl:text>
					<xsl:value-of select="$mm"/>
					<xsl:if test="string-length($ss)&gt;1 and not(contains($ss,'-')) and not (contains($ss,'+'))">
						<xsl:text>:</xsl:text>
						<xsl:value-of select="$ss"/>
					</xsl:if>
				</xsl:if>
			</xsl:if>
			<!-- time zone -->
			<xsl:variable name="tzon">
				<xsl:choose>
					<xsl:when test="contains($date,'+')">
						<xsl:text>+</xsl:text>
						<xsl:value-of select="substring-after($date, '+')"/>
					</xsl:when>
					<xsl:when test="contains($date,'-')">
						<xsl:text>-</xsl:text>
						<xsl:value-of select="substring-after($date, '-')"/>
					</xsl:when>
				</xsl:choose>
			</xsl:variable>
			<xsl:choose>
				<!-- reference: http://www.timeanddate.com/library/abbreviations/timezones/na/ -->
				<xsl:when test="$tzon = '-0500' ">
					<xsl:text>, EST</xsl:text>
				</xsl:when>
				<xsl:when test="$tzon = '-0600' ">
					<xsl:text>, CST</xsl:text>
				</xsl:when>
				<xsl:when test="$tzon = '-0700' ">
					<xsl:text>, MST</xsl:text>
				</xsl:when>
				<xsl:when test="$tzon = '-0800' ">
					<xsl:text>, PST</xsl:text>
				</xsl:when>
				<xsl:otherwise>
					<xsl:text> </xsl:text>
					<xsl:value-of select="$tzon"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
	</xsl:template>
	<!--  mode = format-date
      outputs a date in Month Day, Year form
      e.g., 19991207  ==> December 07, 1999
-->
	<xsl:template match="* | @*" name="format-date" mode="format-date">
		<!-- may be passed in by a calling template -->
		<xsl:param name="the-date"/>
		<xsl:param name="date">
			<!-- turn it into a string -->
			<xsl:choose>
				<xsl:when test="$the-date">
					<xsl:value-of select="$the-date"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="."/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:param>
		<!-- get and translate the month -->
		<xsl:param name="month" select="substring($date, 5, 2)"/>
		<xsl:choose>
			<xsl:when test="string-length($the-date) >= 8 or string-length($date) >= 8">
				<!-- get month - a separate template so others can use it -->
				<xsl:call-template name="format-month">
					<xsl:with-param name="month" select="$month"/>
				</xsl:call-template>
				<!-- get the day -->
				<xsl:choose>
					<xsl:when test='substring ($date, 7, 1)="0"'>
						<xsl:value-of select="substring ($date, 8, 1)"/>
						<xsl:text>, </xsl:text>
					</xsl:when>
					<xsl:otherwise>
						<xsl:value-of select="substring ($date, 7, 2)"/>
						<xsl:text>, </xsl:text>
					</xsl:otherwise>
				</xsl:choose>
				<!-- get the year -->
				<xsl:value-of select="substring ($date, 1, 4)"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$the-date"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="format-month">
		<!-- catch from the calling template -->
		<xsl:param name="month"/>
		<xsl:choose>
			<xsl:when test="$month='01'">
				<xsl:text>January </xsl:text>
			</xsl:when>
			<xsl:when test="$month='02'">
				<xsl:text>February </xsl:text>
			</xsl:when>
			<xsl:when test="$month='03'">
				<xsl:text>March </xsl:text>
			</xsl:when>
			<xsl:when test="$month='04'">
				<xsl:text>April </xsl:text>
			</xsl:when>
			<xsl:when test="$month='05'">
				<xsl:text>May </xsl:text>
			</xsl:when>
			<xsl:when test="$month='06'">
				<xsl:text>June </xsl:text>
			</xsl:when>
			<xsl:when test="$month='07'">
				<xsl:text>July </xsl:text>
			</xsl:when>
			<xsl:when test="$month='08'">
				<xsl:text>August </xsl:text>
			</xsl:when>
			<xsl:when test="$month='09'">
				<xsl:text>September </xsl:text>
			</xsl:when>
			<xsl:when test="$month='10'">
				<xsl:text>October </xsl:text>
			</xsl:when>
			<xsl:when test="$month='11'">
				<xsl:text>November </xsl:text>
			</xsl:when>
			<xsl:when test="$month='12'">
				<xsl:text>December </xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:text>uncatalogued month number</xsl:text>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="get-displayName">
		<xsl:param name="code"/>
		<xsl:param name="codeStr">
			<xsl:choose>
				<xsl:when test="$code//cda:originalText">
					<xsl:value-of select="$code//cda:originalText"/>
				</xsl:when>
				<xsl:when test="$code/@displayName">
					<xsl:value-of select="$code/@displayName"/>
				</xsl:when>
				<xsl:when test="$code/@code and not ($code/@nullFlavor)">
					<xsl:value-of select="$code/@code"/>
				</xsl:when>
				<xsl:when test="$code/@nullFlavor">
					<xsl:call-template name="get-nullFlavor">
						<xsl:with-param name="nullFlavor" select="$code/@nullFlavor"/>
					</xsl:call-template>
				</xsl:when>
				<xsl:when test="$code/@value and $code/@unit='%'">
					<xsl:value-of select="$code/@value"/>%</xsl:when>
				<xsl:when test="$code/@value and $code/@unit">
					<xsl:value-of select="$code/@value"/>
					<xsl:text> </xsl:text>(<xsl:value-of select="$code/@unit"/>)</xsl:when>
				<xsl:when test="$code/@value">
					<xsl:value-of select="$code/@value"/>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="string($code)"/>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:param>
		<xsl:param name="qualiStr">
			<xsl:if test="count($code/cda:qualifier/cda:value)>0">
				<xsl:text> (</xsl:text>
				<xsl:for-each select="$code/cda:qualifier">
					<xsl:if test="cda:name and (cda:value)">
						<xsl:call-template name="get-displayName">
							<xsl:with-param name="code" select="cda:name"/>
						</xsl:call-template>
						<xsl:text>=</xsl:text>
						<xsl:call-template name="get-displayName">
							<xsl:with-param name="code" select="cda:value"/>
						</xsl:call-template>
						<xsl:choose>
							<xsl:when test="position()=last()">
						</xsl:when>
							<xsl:otherwise>
								<xsl:text>; </xsl:text>
							</xsl:otherwise>
						</xsl:choose>
					</xsl:if>
				</xsl:for-each>
				<xsl:text>)</xsl:text>
			</xsl:if>
		</xsl:param>
		<xsl:value-of select="$codeStr"/>
		<xsl:value-of select="$qualiStr"/>
	</xsl:template>
	<xsl:template name="get-value">
		<xsl:param name="value"/>
		<xsl:choose>
			<xsl:when test="$value/@value and $value/@unit">
				<xsl:value-of select="$value/@value"/>
				<xsl:text> </xsl:text>
				<xsl:value-of select="$value/@unit"/>
			</xsl:when>
			<xsl:when test="$value/@value">
				<xsl:value-of select="$value/@value"/>
			</xsl:when>
			<xsl:when test="$value/@code">
				<xsl:value-of select="$value/@code"/>
			</xsl:when>
			<xsl:when test="string-length($value)>0">
				<xsl:value-of select="$value"/>
			</xsl:when>
			<xsl:otherwise>No value information available</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="get-frequency">
		<xsl:param name="freq"/>
		<xsl:choose>
			<xsl:when test="$freq[@xsi:type='TS']">
				<xsl:text> </xsl:text>
				<xsl:call-template name="format-date">
					<xsl:with-param name="the-date">
						<xsl:value-of select="$freq/@value"/>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$freq/cda:period">
				<xsl:text> every </xsl:text>
				<xsl:call-template name="get-width">
					<xsl:with-param name="wd" select="$freq/cda:period"/>
				</xsl:call-template>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<!-- display effectiveTime/width -->
	<xsl:template name="get-width">
		<xsl:param name="wd"/>
		<xsl:choose>
			<xsl:when test="$wd/@unit='a'">
				<xsl:if test="$wd/@value">
					<xsl:value-of select="$wd/@value"/>
				</xsl:if>
				<xsl:text> year(s)</xsl:text>
			</xsl:when>
			<xsl:when test="$wd/@unit='mo'">
				<xsl:variable name="valueMod" select="floor($wd/@value div 12)"/>
				<xsl:choose>
					<xsl:when test="$valueMod &gt; 0">
						<xsl:value-of select="$valueMod"/> Years, <xsl:value-of select="$wd/@value - ($valueMod * 12)"/>
					</xsl:when>
					<xsl:otherwise>
						<xsl:if test="$wd/@value">
							<xsl:value-of select="$wd/@value"/>
						</xsl:if>
					</xsl:otherwise>
				</xsl:choose>
				<xsl:text> month(s)</xsl:text>
			</xsl:when>
			<xsl:when test="$wd/@unit='wk'">
				<xsl:if test="$wd/@value">
					<xsl:value-of select="$wd/@value"/>
				</xsl:if>
				<xsl:text> week(s)</xsl:text>
			</xsl:when>
			<xsl:when test="$wd/@unit='d'">
				<xsl:if test="$wd/@value">
					<xsl:value-of select="$wd/@value"/>
				</xsl:if>
				<xsl:text> day(s)</xsl:text>
			</xsl:when>
			<xsl:when test="$wd/@unit='h'">
				<xsl:if test="$wd/@value">
					<xsl:value-of select="$wd/@value"/>
				</xsl:if>
				<xsl:text> hour(s)</xsl:text>
			</xsl:when>
			<xsl:when test="$wd/@unit='min'">
				<xsl:if test="$wd/@value">
					<xsl:value-of select="$wd/@value"/>
				</xsl:if>
				<xsl:text> mintue(s)</xsl:text>
			</xsl:when>
			<xsl:when test="$wd/@unit='s'">
				<xsl:if test="$wd/@value">
					<xsl:value-of select="$wd/@value"/>
				</xsl:if>
				<xsl:text> second(s)</xsl:text>
			</xsl:when>
			<xsl:otherwise>
				<xsl:if test="$wd/@value">
					<xsl:value-of select="$wd/@value"/>
				</xsl:if>
				<xsl:text> </xsl:text>
				<xsl:value-of select="$wd/@unit"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="get-effectiveTime">
		<xsl:param name="effectiveTime"/>
		<xsl:choose>
			<xsl:when test="$effectiveTime/cda:low[@value] and $effectiveTime/cda:high[@value]">
				<xsl:text>from </xsl:text>
				<xsl:call-template name="format-date">
					<xsl:with-param name="the-date">
						<xsl:value-of select="$effectiveTime/cda:low/@value"/>
					</xsl:with-param>
				</xsl:call-template>
				<xsl:text> to </xsl:text>
				<xsl:call-template name="format-date">
					<xsl:with-param name="the-date">
						<xsl:value-of select="$effectiveTime/cda:high/@value"/>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$effectiveTime/cda:low[@value] and not($effectiveTime/cda:high[@value])">
				<xsl:call-template name="format-date">
					<xsl:with-param name="the-date">
						<xsl:value-of select="$effectiveTime/cda:low/@value"/>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$effectiveTime/cda:high[@value]">
				<xsl:text> to </xsl:text>
				<xsl:call-template name="format-date">
					<xsl:with-param name="the-date">
						<xsl:value-of select="$effectiveTime/cda:high/@value"/>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$effectiveTime/cda:width[@value]">
				<xsl:text> duration: </xsl:text>
				<xsl:call-template name="get-width">
					<xsl:with-param name="wd" select="$effectiveTime/cda:width"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$effectiveTime/@value">
				<xsl:call-template name="format-date">
					<xsl:with-param name="the-date">
						<xsl:value-of select="$effectiveTime/@value"/>
					</xsl:with-param>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$effectiveTime/@nullFlavor">
				<xsl:value-of select="'Date: '"/>
				<xsl:call-template name="get-nullFlavor">
					<xsl:with-param name="nullFlavor" select="$effectiveTime/@nullFlavor"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$effectiveTime/cda:low/@nullFlavor">
				<xsl:value-of select="'Date: '"/>
				<xsl:call-template name="get-nullFlavor">
					<xsl:with-param name="nullFlavor" select="$effectiveTime/cda:low/@nullFlavor"/>
				</xsl:call-template>
			</xsl:when>
			<xsl:when test="$effectiveTime/cda:high/@nullFlavor">
				<xsl:value-of select="'End date: '"/>
				<xsl:call-template name="get-nullFlavor">
					<xsl:with-param name="nullFlavor" select="$effectiveTime/cda:high/@nullFlavor"/>
				</xsl:call-template>
			</xsl:when>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="get-nullFlavor">
		<xsl:param name="nullFlavor"/>
		<xsl:choose>
			<xsl:when test="$nullFlavor='NI'">No Information</xsl:when>
			<xsl:when test="$nullFlavor='NA'">Not Available</xsl:when>
			<xsl:when test="$nullFlavor='OTH'">Other (OTH)</xsl:when>
			<xsl:when test="$nullFlavor='UNK'">Unknown</xsl:when>
			<xsl:when test="$nullFlavor='NAV'">Temporarily Unavailable</xsl:when>
			<xsl:when test="$nullFlavor='NASK'">Not Asked</xsl:when>
			<xsl:when test="$nullFlavor='MSK'">Masked</xsl:when>
			<xsl:when test="$nullFlavor='NP'">Not Present</xsl:when>
			<xsl:otherwise>Null Flavor: <xsl:value-of select="$nullFlavor"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- show assignedEntity -->
	<xsl:template name="show-assignedEntity">
		<xsl:param name="asgnEntity"/>
		<xsl:choose>
			<xsl:when test="$asgnEntity/cda:assignedPerson/cda:name">
				<xsl:call-template name="show-name-narrative">
					<xsl:with-param name="name" select="$asgnEntity/cda:assignedPerson/cda:name"/>
				</xsl:call-template>
				<xsl:if test="$asgnEntity/cda:representedOrganization/cda:name">
					<xsl:text> of </xsl:text>
					<xsl:value-of select="$asgnEntity/cda:representedOrganization/cda:name"/>
				</xsl:if>
			</xsl:when>
			<xsl:when test="$asgnEntity/cda:representedOrganization">
				<xsl:value-of select="$asgnEntity/cda:representedOrganization/cda:name"/>
			</xsl:when>
			<xsl:otherwise>
				<xsl:for-each select="$asgnEntity/cda:id">
					<xsl:apply-templates mode="show-id"/>
				</xsl:for-each>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<!-- show-name-narrative  -->
	<xsl:template name="show-name-narrative">
		<xsl:param name="name"/>
		<xsl:choose>
			<xsl:when test="$name/cda:family">
				<xsl:if test="$name/cda:prefix">
					<xsl:value-of select="$name/cda:prefix"/>
					<xsl:text> </xsl:text>
				</xsl:if>
				<xsl:value-of select="$name/cda:given"/>
				<xsl:text> </xsl:text>
				<xsl:value-of select="$name/cda:family"/>
				<xsl:if test="$name/cda:suffix">
					<xsl:text>, </xsl:text>
					<xsl:value-of select="$name/cda:suffix"/>
				</xsl:if>
			</xsl:when>
			<xsl:otherwise>
				<xsl:value-of select="$name"/>
			</xsl:otherwise>
		</xsl:choose>
	</xsl:template>
	<xsl:template name="displayCodeValuePair">
		<xsl:param name="clinicalStatement"/>
		<!-- only show the code if it is not an assertion pattern -->
		<xsl:if test="$clinicalStatement/cda:code/@code != 'ASSERTION' or $clinicalStatement/cda:code[not(@code) and cda:originalText]">
			<xsl:variable name="codeStr">
				<xsl:call-template name="get-displayName">
					<xsl:with-param name="code" select="$clinicalStatement/cda:code"/>
				</xsl:call-template>
			</xsl:variable>
			<xsl:variable name="strL" select="string-length($codeStr)"/>
			<xsl:variable name="lstChar" select="substring($codeStr,$strL)"/>
			<xsl:choose>
				<xsl:when test="$lstChar=':'">
					<xsl:value-of select="$codeStr"/>
					<xsl:text> </xsl:text>
				</xsl:when>
				<xsl:otherwise>
					<xsl:value-of select="$codeStr"/>
					<xsl:text>: </xsl:text>
				</xsl:otherwise>
			</xsl:choose>
		</xsl:if>
		<xsl:call-template name="get-displayName">
			<xsl:with-param name="code" select="$clinicalStatement/cda:value"/>
		</xsl:call-template>
		<!-- include the qualifier information if it is there -->
		<xsl:if test="$clinicalStatement/cda:value/cda:qualifier">
			<xsl:text> (</xsl:text>
			<xsl:call-template name="get-displayName">
				<xsl:with-param name="code" select="$clinicalStatement/cda:value/cda:qualifier/cda:value"/>
			</xsl:call-template>
			<xsl:text>)</xsl:text>
		</xsl:if>
	</xsl:template>
	<xsl:template name="spaceLoop">
		<xsl:param name="i"/>
		<xsl:param name="count"/>
		<xsl:if test="number($i) &lt; number($count)">
			<xsl:text>-</xsl:text>
		</xsl:if>
		<xsl:if test="number($i) &lt;= number($count)">
			<xsl:call-template name="spaceLoop">
				<xsl:with-param name="i">
					<xsl:value-of select="$i + 1"/>
				</xsl:with-param>
				<xsl:with-param name="count">
					<xsl:value-of select="$count"/>
				</xsl:with-param>
			</xsl:call-template>
		</xsl:if>
	</xsl:template>
</xsl:transform>